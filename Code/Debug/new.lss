
new.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002eaa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00002eaa  00002f3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080007a  0080007a  00002f58  2**0
                  ALLOC
  3 .stab         00002ebc  00000000  00000000  00002f58  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000117f  00000000  00000000  00005e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006f93  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000070d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007243  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009d77  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ab24  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ac84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000af11  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b6df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__vector_1>
       8:	0c 94 59 0b 	jmp	0x16b2	; 0x16b2 <__vector_2>
       c:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 ab 12 	jmp	0x2556	; 0x2556 <__vector_10>
      2c:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ea       	ldi	r30, 0xAA	; 170
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 38       	cpi	r26, 0x86	; 134
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <main>
      8a:	0c 94 53 17 	jmp	0x2ea6	; 0x2ea6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1c 17 	jmp	0x2e38	; 0x2e38 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 38 17 	jmp	0x2e70	; 0x2e70 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 28 17 	jmp	0x2e50	; 0x2e50 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 44 17 	jmp	0x2e88	; 0x2e88 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 28 17 	jmp	0x2e50	; 0x2e50 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 44 17 	jmp	0x2e88	; 0x2e88 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1c 17 	jmp	0x2e38	; 0x2e38 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 38 17 	jmp	0x2e70	; 0x2e70 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 28 17 	jmp	0x2e50	; 0x2e50 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 44 17 	jmp	0x2e88	; 0x2e88 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 28 17 	jmp	0x2e50	; 0x2e50 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 44 17 	jmp	0x2e88	; 0x2e88 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 28 17 	jmp	0x2e50	; 0x2e50 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 44 17 	jmp	0x2e88	; 0x2e88 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 48 17 	jmp	0x2e90	; 0x2e90 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_Init>:
#include "BIT_MATH.h"

#include "ADC_interface.h"
#include "ADC_register.h"

void ADC_Init (void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADMUX,REFS0);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24

	CLR_BIT(ADMUX,ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7d       	andi	r24, 0xDF	; 223
     b76:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADPS2);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	84 60       	ori	r24, 0x04	; 4
     b84:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	82 60       	ori	r24, 0x02	; 2
     b92:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS0);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	81 60       	ori	r24, 0x01	; 1
     ba0:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADEN);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 68       	ori	r24, 0x80	; 128
     bae:	8c 93       	st	X, r24
}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <ADC_Read>:
u16 ADC_Read (u8 Channel){
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	0f 92       	push	r0
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	89 83       	std	Y+1, r24	; 0x01

	ADMUX=((ADMUX&0b11100000)|(Channel));
     bc2:	a7 e2       	ldi	r26, 0x27	; 39
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e7 e2       	ldi	r30, 0x27	; 39
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	98 2f       	mov	r25, r24
     bce:	90 7e       	andi	r25, 0xE0	; 224
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	89 2b       	or	r24, r25
     bd4:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC);
     bd6:	a6 e2       	ldi	r26, 0x26	; 38
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	e6 e2       	ldi	r30, 0x26	; 38
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	80 64       	ori	r24, 0x40	; 64
     be2:	8c 93       	st	X, r24

	while(GET_BIT(ADCSRA,ADIF)==0);
     be4:	e6 e2       	ldi	r30, 0x26	; 38
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	82 95       	swap	r24
     bec:	8f 70       	andi	r24, 0x0F	; 15
     bee:	88 2f       	mov	r24, r24
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	81 70       	andi	r24, 0x01	; 1
     bf4:	90 70       	andi	r25, 0x00	; 0
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	a9 f3       	breq	.-22     	; 0xbe4 <ADC_Read+0x2e>

	SET_BIT(ADCSRA,ADIF);
     bfa:	a6 e2       	ldi	r26, 0x26	; 38
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e6 e2       	ldi	r30, 0x26	; 38
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	80 61       	ori	r24, 0x10	; 16
     c06:	8c 93       	st	X, r24

	return ADC_Reg;
     c08:	e4 e2       	ldi	r30, 0x24	; 36
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	91 81       	ldd	r25, Z+1	; 0x01
}
     c10:	0f 90       	pop	r0
     c12:	cf 91       	pop	r28
     c14:	df 91       	pop	r29
     c16:	08 95       	ret

00000c18 <Mapping>:
u32 Mapping (u32 Range1_max,u32 Range1_min,u32 Range2_max,u32 Range2_min,u32 Range1_reading){
     c18:	af 92       	push	r10
     c1a:	bf 92       	push	r11
     c1c:	cf 92       	push	r12
     c1e:	df 92       	push	r13
     c20:	ef 92       	push	r14
     c22:	ff 92       	push	r15
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
     c30:	60 97       	sbiw	r28, 0x10	; 16
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	f8 94       	cli
     c36:	de bf       	out	0x3e, r29	; 62
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	cd bf       	out	0x3d, r28	; 61
     c3c:	69 83       	std	Y+1, r22	; 0x01
     c3e:	7a 83       	std	Y+2, r23	; 0x02
     c40:	8b 83       	std	Y+3, r24	; 0x03
     c42:	9c 83       	std	Y+4, r25	; 0x04
     c44:	2d 83       	std	Y+5, r18	; 0x05
     c46:	3e 83       	std	Y+6, r19	; 0x06
     c48:	4f 83       	std	Y+7, r20	; 0x07
     c4a:	58 87       	std	Y+8, r21	; 0x08
     c4c:	e9 86       	std	Y+9, r14	; 0x09
     c4e:	fa 86       	std	Y+10, r15	; 0x0a
     c50:	0b 87       	std	Y+11, r16	; 0x0b
     c52:	1c 87       	std	Y+12, r17	; 0x0c
     c54:	ad 86       	std	Y+13, r10	; 0x0d
     c56:	be 86       	std	Y+14, r11	; 0x0e
     c58:	cf 86       	std	Y+15, r12	; 0x0f
     c5a:	d8 8a       	std	Y+16, r13	; 0x10

	return (Range2_max-((Range2_max-Range2_min)*(Range1_max-Range1_reading)/(Range1_max-Range1_min)));
     c5c:	29 85       	ldd	r18, Y+9	; 0x09
     c5e:	3a 85       	ldd	r19, Y+10	; 0x0a
     c60:	4b 85       	ldd	r20, Y+11	; 0x0b
     c62:	5c 85       	ldd	r21, Y+12	; 0x0c
     c64:	8d 85       	ldd	r24, Y+13	; 0x0d
     c66:	9e 85       	ldd	r25, Y+14	; 0x0e
     c68:	af 85       	ldd	r26, Y+15	; 0x0f
     c6a:	b8 89       	ldd	r27, Y+16	; 0x10
     c6c:	79 01       	movw	r14, r18
     c6e:	8a 01       	movw	r16, r20
     c70:	e8 1a       	sub	r14, r24
     c72:	f9 0a       	sbc	r15, r25
     c74:	0a 0b       	sbc	r16, r26
     c76:	1b 0b       	sbc	r17, r27
     c78:	29 81       	ldd	r18, Y+1	; 0x01
     c7a:	3a 81       	ldd	r19, Y+2	; 0x02
     c7c:	4b 81       	ldd	r20, Y+3	; 0x03
     c7e:	5c 81       	ldd	r21, Y+4	; 0x04
     c80:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c82:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c84:	af 8d       	ldd	r26, Y+31	; 0x1f
     c86:	b8 a1       	ldd	r27, Y+32	; 0x20
     c88:	28 1b       	sub	r18, r24
     c8a:	39 0b       	sbc	r19, r25
     c8c:	4a 0b       	sbc	r20, r26
     c8e:	5b 0b       	sbc	r21, r27
     c90:	c8 01       	movw	r24, r16
     c92:	b7 01       	movw	r22, r14
     c94:	0e 94 db 16 	call	0x2db6	; 0x2db6 <__mulsi3>
     c98:	7b 01       	movw	r14, r22
     c9a:	8c 01       	movw	r16, r24
     c9c:	29 81       	ldd	r18, Y+1	; 0x01
     c9e:	3a 81       	ldd	r19, Y+2	; 0x02
     ca0:	4b 81       	ldd	r20, Y+3	; 0x03
     ca2:	5c 81       	ldd	r21, Y+4	; 0x04
     ca4:	8d 81       	ldd	r24, Y+5	; 0x05
     ca6:	9e 81       	ldd	r25, Y+6	; 0x06
     ca8:	af 81       	ldd	r26, Y+7	; 0x07
     caa:	b8 85       	ldd	r27, Y+8	; 0x08
     cac:	28 1b       	sub	r18, r24
     cae:	39 0b       	sbc	r19, r25
     cb0:	4a 0b       	sbc	r20, r26
     cb2:	5b 0b       	sbc	r21, r27
     cb4:	c8 01       	movw	r24, r16
     cb6:	b7 01       	movw	r22, r14
     cb8:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <__udivmodsi4>
     cbc:	da 01       	movw	r26, r20
     cbe:	c9 01       	movw	r24, r18
     cc0:	9c 01       	movw	r18, r24
     cc2:	ad 01       	movw	r20, r26
     cc4:	89 85       	ldd	r24, Y+9	; 0x09
     cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     cc8:	ab 85       	ldd	r26, Y+11	; 0x0b
     cca:	bc 85       	ldd	r27, Y+12	; 0x0c
     ccc:	82 1b       	sub	r24, r18
     cce:	93 0b       	sbc	r25, r19
     cd0:	a4 0b       	sbc	r26, r20
     cd2:	b5 0b       	sbc	r27, r21
}
     cd4:	bc 01       	movw	r22, r24
     cd6:	cd 01       	movw	r24, r26
     cd8:	60 96       	adiw	r28, 0x10	; 16
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	f8 94       	cli
     cde:	de bf       	out	0x3e, r29	; 62
     ce0:	0f be       	out	0x3f, r0	; 63
     ce2:	cd bf       	out	0x3d, r28	; 61
     ce4:	cf 91       	pop	r28
     ce6:	df 91       	pop	r29
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	ff 90       	pop	r15
     cee:	ef 90       	pop	r14
     cf0:	df 90       	pop	r13
     cf2:	cf 90       	pop	r12
     cf4:	bf 90       	pop	r11
     cf6:	af 90       	pop	r10
     cf8:	08 95       	ret

00000cfa <DIO_SetPortDirection>:
#include "BIT_MATH.h"

#include "DIO_register.h"
#include "DIO_interface.h"

void DIO_SetPortDirection(u8 u8PortIdCopy,u8 u8PortDirCopy){
     cfa:	df 93       	push	r29
     cfc:	cf 93       	push	r28
     cfe:	00 d0       	rcall	.+0      	; 0xd00 <DIO_SetPortDirection+0x6>
     d00:	00 d0       	rcall	.+0      	; 0xd02 <DIO_SetPortDirection+0x8>
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	89 83       	std	Y+1, r24	; 0x01
     d08:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortIdCopy){
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	3c 83       	std	Y+4, r19	; 0x04
     d12:	2b 83       	std	Y+3, r18	; 0x03
     d14:	8b 81       	ldd	r24, Y+3	; 0x03
     d16:	9c 81       	ldd	r25, Y+4	; 0x04
     d18:	81 30       	cpi	r24, 0x01	; 1
     d1a:	91 05       	cpc	r25, r1
     d1c:	d1 f0       	breq	.+52     	; 0xd52 <DIO_SetPortDirection+0x58>
     d1e:	2b 81       	ldd	r18, Y+3	; 0x03
     d20:	3c 81       	ldd	r19, Y+4	; 0x04
     d22:	22 30       	cpi	r18, 0x02	; 2
     d24:	31 05       	cpc	r19, r1
     d26:	2c f4       	brge	.+10     	; 0xd32 <DIO_SetPortDirection+0x38>
     d28:	8b 81       	ldd	r24, Y+3	; 0x03
     d2a:	9c 81       	ldd	r25, Y+4	; 0x04
     d2c:	00 97       	sbiw	r24, 0x00	; 0
     d2e:	61 f0       	breq	.+24     	; 0xd48 <DIO_SetPortDirection+0x4e>
     d30:	1e c0       	rjmp	.+60     	; 0xd6e <DIO_SetPortDirection+0x74>
     d32:	2b 81       	ldd	r18, Y+3	; 0x03
     d34:	3c 81       	ldd	r19, Y+4	; 0x04
     d36:	22 30       	cpi	r18, 0x02	; 2
     d38:	31 05       	cpc	r19, r1
     d3a:	81 f0       	breq	.+32     	; 0xd5c <DIO_SetPortDirection+0x62>
     d3c:	8b 81       	ldd	r24, Y+3	; 0x03
     d3e:	9c 81       	ldd	r25, Y+4	; 0x04
     d40:	83 30       	cpi	r24, 0x03	; 3
     d42:	91 05       	cpc	r25, r1
     d44:	81 f0       	breq	.+32     	; 0xd66 <DIO_SetPortDirection+0x6c>
     d46:	13 c0       	rjmp	.+38     	; 0xd6e <DIO_SetPortDirection+0x74>
	case PORT_A :
		DDRA_Register=u8PortDirCopy;
     d48:	ea e3       	ldi	r30, 0x3A	; 58
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	8a 81       	ldd	r24, Y+2	; 0x02
     d4e:	80 83       	st	Z, r24
     d50:	0e c0       	rjmp	.+28     	; 0xd6e <DIO_SetPortDirection+0x74>
		break;
	case PORT_B :
		DDRB_Register=u8PortDirCopy;
     d52:	e7 e3       	ldi	r30, 0x37	; 55
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	80 83       	st	Z, r24
     d5a:	09 c0       	rjmp	.+18     	; 0xd6e <DIO_SetPortDirection+0x74>
		break;
	case PORT_C :
		DDRC_Register=u8PortDirCopy;
     d5c:	e4 e3       	ldi	r30, 0x34	; 52
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	80 83       	st	Z, r24
     d64:	04 c0       	rjmp	.+8      	; 0xd6e <DIO_SetPortDirection+0x74>
		break;
	case PORT_D :
		DDRD_Register=u8PortDirCopy;
     d66:	e1 e3       	ldi	r30, 0x31	; 49
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	80 83       	st	Z, r24
		break;
	default:
		break;
	}

}
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	cf 91       	pop	r28
     d78:	df 91       	pop	r29
     d7a:	08 95       	ret

00000d7c <DIO_SetPortValue>:

void DIO_SetPortValue(u8 u8PortIdCopy,u8 u8PortValCopy){
     d7c:	df 93       	push	r29
     d7e:	cf 93       	push	r28
     d80:	00 d0       	rcall	.+0      	; 0xd82 <DIO_SetPortValue+0x6>
     d82:	00 d0       	rcall	.+0      	; 0xd84 <DIO_SetPortValue+0x8>
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
     d88:	89 83       	std	Y+1, r24	; 0x01
     d8a:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortIdCopy){
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	3c 83       	std	Y+4, r19	; 0x04
     d94:	2b 83       	std	Y+3, r18	; 0x03
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	9c 81       	ldd	r25, Y+4	; 0x04
     d9a:	81 30       	cpi	r24, 0x01	; 1
     d9c:	91 05       	cpc	r25, r1
     d9e:	d1 f0       	breq	.+52     	; 0xdd4 <DIO_SetPortValue+0x58>
     da0:	2b 81       	ldd	r18, Y+3	; 0x03
     da2:	3c 81       	ldd	r19, Y+4	; 0x04
     da4:	22 30       	cpi	r18, 0x02	; 2
     da6:	31 05       	cpc	r19, r1
     da8:	2c f4       	brge	.+10     	; 0xdb4 <DIO_SetPortValue+0x38>
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	9c 81       	ldd	r25, Y+4	; 0x04
     dae:	00 97       	sbiw	r24, 0x00	; 0
     db0:	61 f0       	breq	.+24     	; 0xdca <DIO_SetPortValue+0x4e>
     db2:	1e c0       	rjmp	.+60     	; 0xdf0 <DIO_SetPortValue+0x74>
     db4:	2b 81       	ldd	r18, Y+3	; 0x03
     db6:	3c 81       	ldd	r19, Y+4	; 0x04
     db8:	22 30       	cpi	r18, 0x02	; 2
     dba:	31 05       	cpc	r19, r1
     dbc:	81 f0       	breq	.+32     	; 0xdde <DIO_SetPortValue+0x62>
     dbe:	8b 81       	ldd	r24, Y+3	; 0x03
     dc0:	9c 81       	ldd	r25, Y+4	; 0x04
     dc2:	83 30       	cpi	r24, 0x03	; 3
     dc4:	91 05       	cpc	r25, r1
     dc6:	81 f0       	breq	.+32     	; 0xde8 <DIO_SetPortValue+0x6c>
     dc8:	13 c0       	rjmp	.+38     	; 0xdf0 <DIO_SetPortValue+0x74>
	case PORT_A :
		PORTA_Register=u8PortValCopy;
     dca:	eb e3       	ldi	r30, 0x3B	; 59
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	80 83       	st	Z, r24
     dd2:	0e c0       	rjmp	.+28     	; 0xdf0 <DIO_SetPortValue+0x74>
		break;
	case PORT_B :
		PORTB_Register=u8PortValCopy;
     dd4:	e8 e3       	ldi	r30, 0x38	; 56
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	8a 81       	ldd	r24, Y+2	; 0x02
     dda:	80 83       	st	Z, r24
     ddc:	09 c0       	rjmp	.+18     	; 0xdf0 <DIO_SetPortValue+0x74>
		break;
	case PORT_C :
		PORTC_Register=u8PortValCopy;
     dde:	e5 e3       	ldi	r30, 0x35	; 53
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	80 83       	st	Z, r24
     de6:	04 c0       	rjmp	.+8      	; 0xdf0 <DIO_SetPortValue+0x74>
		break;
	case PORT_D :
		PORTD_Register=u8PortValCopy;
     de8:	e2 e3       	ldi	r30, 0x32	; 50
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	8a 81       	ldd	r24, Y+2	; 0x02
     dee:	80 83       	st	Z, r24
		break;
	default :
		break;
	}

}
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	cf 91       	pop	r28
     dfa:	df 91       	pop	r29
     dfc:	08 95       	ret

00000dfe <DIO_TogglePortValue>:


void DIO_TogglePortValue(u8 u8PortIdCopy){
     dfe:	df 93       	push	r29
     e00:	cf 93       	push	r28
     e02:	00 d0       	rcall	.+0      	; 0xe04 <DIO_TogglePortValue+0x6>
     e04:	0f 92       	push	r0
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	89 83       	std	Y+1, r24	; 0x01
	switch(u8PortIdCopy){
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	3b 83       	std	Y+3, r19	; 0x03
     e14:	2a 83       	std	Y+2, r18	; 0x02
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	9b 81       	ldd	r25, Y+3	; 0x03
     e1a:	81 30       	cpi	r24, 0x01	; 1
     e1c:	91 05       	cpc	r25, r1
     e1e:	e9 f0       	breq	.+58     	; 0xe5a <DIO_TogglePortValue+0x5c>
     e20:	2a 81       	ldd	r18, Y+2	; 0x02
     e22:	3b 81       	ldd	r19, Y+3	; 0x03
     e24:	22 30       	cpi	r18, 0x02	; 2
     e26:	31 05       	cpc	r19, r1
     e28:	2c f4       	brge	.+10     	; 0xe34 <DIO_TogglePortValue+0x36>
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	9b 81       	ldd	r25, Y+3	; 0x03
     e2e:	00 97       	sbiw	r24, 0x00	; 0
     e30:	61 f0       	breq	.+24     	; 0xe4a <DIO_TogglePortValue+0x4c>
     e32:	2a c0       	rjmp	.+84     	; 0xe88 <DIO_TogglePortValue+0x8a>
     e34:	2a 81       	ldd	r18, Y+2	; 0x02
     e36:	3b 81       	ldd	r19, Y+3	; 0x03
     e38:	22 30       	cpi	r18, 0x02	; 2
     e3a:	31 05       	cpc	r19, r1
     e3c:	b1 f0       	breq	.+44     	; 0xe6a <DIO_TogglePortValue+0x6c>
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	9b 81       	ldd	r25, Y+3	; 0x03
     e42:	83 30       	cpi	r24, 0x03	; 3
     e44:	91 05       	cpc	r25, r1
     e46:	c9 f0       	breq	.+50     	; 0xe7a <DIO_TogglePortValue+0x7c>
     e48:	1f c0       	rjmp	.+62     	; 0xe88 <DIO_TogglePortValue+0x8a>
	case PORT_A:
		PORTA_Register = ~ PORTA_Register;
     e4a:	ab e3       	ldi	r26, 0x3B	; 59
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	eb e3       	ldi	r30, 0x3B	; 59
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	80 95       	com	r24
     e56:	8c 93       	st	X, r24
     e58:	17 c0       	rjmp	.+46     	; 0xe88 <DIO_TogglePortValue+0x8a>
		break;
	case PORT_B:
		PORTB_Register = ~ PORTB_Register;
     e5a:	a8 e3       	ldi	r26, 0x38	; 56
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e8 e3       	ldi	r30, 0x38	; 56
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	80 95       	com	r24
     e66:	8c 93       	st	X, r24
     e68:	0f c0       	rjmp	.+30     	; 0xe88 <DIO_TogglePortValue+0x8a>
		break;
	case PORT_C:
		PORTC_Register = ~ PORTC_Register;
     e6a:	a5 e3       	ldi	r26, 0x35	; 53
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e5 e3       	ldi	r30, 0x35	; 53
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	80 95       	com	r24
     e76:	8c 93       	st	X, r24
     e78:	07 c0       	rjmp	.+14     	; 0xe88 <DIO_TogglePortValue+0x8a>
		break;
	case PORT_D:
		PORTD_Register = ~ PORTD_Register;
     e7a:	a2 e3       	ldi	r26, 0x32	; 50
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e2 e3       	ldi	r30, 0x32	; 50
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	80 95       	com	r24
     e86:	8c 93       	st	X, r24
	default :
		break;

	}

}
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	08 95       	ret

00000e94 <DIO_GetPortValue>:
u8 DIO_GetPortValue(u8 u8PortIdCopy){
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	00 d0       	rcall	.+0      	; 0xe9a <DIO_GetPortValue+0x6>
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <DIO_GetPortValue+0x8>
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	8a 83       	std	Y+2, r24	; 0x02
	u8 u8LocalReturnCopy;
	switch(u8PortIdCopy){
     ea2:	8a 81       	ldd	r24, Y+2	; 0x02
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	3c 83       	std	Y+4, r19	; 0x04
     eaa:	2b 83       	std	Y+3, r18	; 0x03
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	9c 81       	ldd	r25, Y+4	; 0x04
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	91 05       	cpc	r25, r1
     eb4:	d1 f0       	breq	.+52     	; 0xeea <DIO_GetPortValue+0x56>
     eb6:	2b 81       	ldd	r18, Y+3	; 0x03
     eb8:	3c 81       	ldd	r19, Y+4	; 0x04
     eba:	22 30       	cpi	r18, 0x02	; 2
     ebc:	31 05       	cpc	r19, r1
     ebe:	2c f4       	brge	.+10     	; 0xeca <DIO_GetPortValue+0x36>
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	9c 81       	ldd	r25, Y+4	; 0x04
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	61 f0       	breq	.+24     	; 0xee0 <DIO_GetPortValue+0x4c>
     ec8:	1e c0       	rjmp	.+60     	; 0xf06 <DIO_GetPortValue+0x72>
     eca:	2b 81       	ldd	r18, Y+3	; 0x03
     ecc:	3c 81       	ldd	r19, Y+4	; 0x04
     ece:	22 30       	cpi	r18, 0x02	; 2
     ed0:	31 05       	cpc	r19, r1
     ed2:	81 f0       	breq	.+32     	; 0xef4 <DIO_GetPortValue+0x60>
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	9c 81       	ldd	r25, Y+4	; 0x04
     ed8:	83 30       	cpi	r24, 0x03	; 3
     eda:	91 05       	cpc	r25, r1
     edc:	81 f0       	breq	.+32     	; 0xefe <DIO_GetPortValue+0x6a>
     ede:	13 c0       	rjmp	.+38     	; 0xf06 <DIO_GetPortValue+0x72>
	case PORT_A:
		u8LocalReturnCopy = PINA_Register ;
     ee0:	e9 e3       	ldi	r30, 0x39	; 57
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	89 83       	std	Y+1, r24	; 0x01
     ee8:	0e c0       	rjmp	.+28     	; 0xf06 <DIO_GetPortValue+0x72>
		break;
	case PORT_B:
		u8LocalReturnCopy = PINB_Register ;
     eea:	e6 e3       	ldi	r30, 0x36	; 54
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	89 83       	std	Y+1, r24	; 0x01
     ef2:	09 c0       	rjmp	.+18     	; 0xf06 <DIO_GetPortValue+0x72>
		break;
	case PORT_C:
		u8LocalReturnCopy = PINC_Register ;
     ef4:	e3 e3       	ldi	r30, 0x33	; 51
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	89 83       	std	Y+1, r24	; 0x01
     efc:	04 c0       	rjmp	.+8      	; 0xf06 <DIO_GetPortValue+0x72>
		break;
	case PORT_D:
		u8LocalReturnCopy = PIND_Register ;
     efe:	e0 e3       	ldi	r30, 0x30	; 48
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	89 83       	std	Y+1, r24	; 0x01
		break;
	default :
		break;
	}
	return u8LocalReturnCopy;
     f06:	89 81       	ldd	r24, Y+1	; 0x01

}
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	08 95       	ret

00000f16 <DIO_SetPinValue>:
/* IO Pins */
void DIO_SetPinValue(u8 u8PortIdCopy,u8 u8PinIdCopy,u8 u8PinValCopy){
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	00 d0       	rcall	.+0      	; 0xf1c <DIO_SetPinValue+0x6>
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <DIO_SetPinValue+0x8>
     f1e:	0f 92       	push	r0
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	89 83       	std	Y+1, r24	; 0x01
     f26:	6a 83       	std	Y+2, r22	; 0x02
     f28:	4b 83       	std	Y+3, r20	; 0x03
	switch(u8PortIdCopy){
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	3d 83       	std	Y+5, r19	; 0x05
     f32:	2c 83       	std	Y+4, r18	; 0x04
     f34:	8c 81       	ldd	r24, Y+4	; 0x04
     f36:	9d 81       	ldd	r25, Y+5	; 0x05
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	91 05       	cpc	r25, r1
     f3c:	09 f4       	brne	.+2      	; 0xf40 <DIO_SetPinValue+0x2a>
     f3e:	47 c0       	rjmp	.+142    	; 0xfce <DIO_SetPinValue+0xb8>
     f40:	2c 81       	ldd	r18, Y+4	; 0x04
     f42:	3d 81       	ldd	r19, Y+5	; 0x05
     f44:	22 30       	cpi	r18, 0x02	; 2
     f46:	31 05       	cpc	r19, r1
     f48:	2c f4       	brge	.+10     	; 0xf54 <DIO_SetPinValue+0x3e>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	71 f0       	breq	.+28     	; 0xf6e <DIO_SetPinValue+0x58>
     f52:	cb c0       	rjmp	.+406    	; 0x10ea <DIO_SetPinValue+0x1d4>
     f54:	2c 81       	ldd	r18, Y+4	; 0x04
     f56:	3d 81       	ldd	r19, Y+5	; 0x05
     f58:	22 30       	cpi	r18, 0x02	; 2
     f5a:	31 05       	cpc	r19, r1
     f5c:	09 f4       	brne	.+2      	; 0xf60 <DIO_SetPinValue+0x4a>
     f5e:	67 c0       	rjmp	.+206    	; 0x102e <DIO_SetPinValue+0x118>
     f60:	8c 81       	ldd	r24, Y+4	; 0x04
     f62:	9d 81       	ldd	r25, Y+5	; 0x05
     f64:	83 30       	cpi	r24, 0x03	; 3
     f66:	91 05       	cpc	r25, r1
     f68:	09 f4       	brne	.+2      	; 0xf6c <DIO_SetPinValue+0x56>
     f6a:	91 c0       	rjmp	.+290    	; 0x108e <DIO_SetPinValue+0x178>
     f6c:	be c0       	rjmp	.+380    	; 0x10ea <DIO_SetPinValue+0x1d4>
	case PORT_A:
		if(u8PinValCopy == PIN_LOW){
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	88 23       	and	r24, r24
     f72:	a9 f4       	brne	.+42     	; 0xf9e <DIO_SetPinValue+0x88>
			CLR_BIT(PORTA_Register,u8PinIdCopy);
     f74:	ab e3       	ldi	r26, 0x3B	; 59
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	eb e3       	ldi	r30, 0x3B	; 59
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	48 2f       	mov	r20, r24
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	02 2e       	mov	r0, r18
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <DIO_SetPinValue+0x7c>
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	0a 94       	dec	r0
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <DIO_SetPinValue+0x78>
     f96:	80 95       	com	r24
     f98:	84 23       	and	r24, r20
     f9a:	8c 93       	st	X, r24
     f9c:	a6 c0       	rjmp	.+332    	; 0x10ea <DIO_SetPinValue+0x1d4>
		}
		else if (u8PinValCopy == PIN_HIGH){
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	81 30       	cpi	r24, 0x01	; 1
     fa2:	09 f0       	breq	.+2      	; 0xfa6 <DIO_SetPinValue+0x90>
     fa4:	a2 c0       	rjmp	.+324    	; 0x10ea <DIO_SetPinValue+0x1d4>
			SET_BIT(PORTA_Register,u8PinIdCopy);
     fa6:	ab e3       	ldi	r26, 0x3B	; 59
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	eb e3       	ldi	r30, 0x3B	; 59
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	48 2f       	mov	r20, r24
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	02 2e       	mov	r0, r18
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <DIO_SetPinValue+0xae>
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	0a 94       	dec	r0
     fc6:	e2 f7       	brpl	.-8      	; 0xfc0 <DIO_SetPinValue+0xaa>
     fc8:	84 2b       	or	r24, r20
     fca:	8c 93       	st	X, r24
     fcc:	8e c0       	rjmp	.+284    	; 0x10ea <DIO_SetPinValue+0x1d4>
		}
		else {
		}
		break;
	case PORT_B:
		if(u8PinValCopy == PIN_LOW){
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	88 23       	and	r24, r24
     fd2:	a9 f4       	brne	.+42     	; 0xffe <DIO_SetPinValue+0xe8>
			CLR_BIT(PORTB_Register,u8PinIdCopy);
     fd4:	a8 e3       	ldi	r26, 0x38	; 56
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e8 e3       	ldi	r30, 0x38	; 56
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	48 2f       	mov	r20, r24
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	02 2e       	mov	r0, r18
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <DIO_SetPinValue+0xdc>
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	0a 94       	dec	r0
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <DIO_SetPinValue+0xd8>
     ff6:	80 95       	com	r24
     ff8:	84 23       	and	r24, r20
     ffa:	8c 93       	st	X, r24
     ffc:	76 c0       	rjmp	.+236    	; 0x10ea <DIO_SetPinValue+0x1d4>
		}
		else if (u8PinValCopy == PIN_HIGH){
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	09 f0       	breq	.+2      	; 0x1006 <DIO_SetPinValue+0xf0>
    1004:	72 c0       	rjmp	.+228    	; 0x10ea <DIO_SetPinValue+0x1d4>
			SET_BIT(PORTB_Register,u8PinIdCopy);
    1006:	a8 e3       	ldi	r26, 0x38	; 56
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e8 e3       	ldi	r30, 0x38	; 56
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	48 2f       	mov	r20, r24
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	02 2e       	mov	r0, r18
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <DIO_SetPinValue+0x10e>
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	0a 94       	dec	r0
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <DIO_SetPinValue+0x10a>
    1028:	84 2b       	or	r24, r20
    102a:	8c 93       	st	X, r24
    102c:	5e c0       	rjmp	.+188    	; 0x10ea <DIO_SetPinValue+0x1d4>
		}
		else {
		}
		break;
	case PORT_C:
		if(u8PinValCopy == PIN_LOW){
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	88 23       	and	r24, r24
    1032:	a9 f4       	brne	.+42     	; 0x105e <DIO_SetPinValue+0x148>
			CLR_BIT(PORTC_Register,u8PinIdCopy);
    1034:	a5 e3       	ldi	r26, 0x35	; 53
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e5 e3       	ldi	r30, 0x35	; 53
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	48 2f       	mov	r20, r24
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 2e       	mov	r0, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <DIO_SetPinValue+0x13c>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	0a 94       	dec	r0
    1054:	e2 f7       	brpl	.-8      	; 0x104e <DIO_SetPinValue+0x138>
    1056:	80 95       	com	r24
    1058:	84 23       	and	r24, r20
    105a:	8c 93       	st	X, r24
    105c:	46 c0       	rjmp	.+140    	; 0x10ea <DIO_SetPinValue+0x1d4>
		}
		else if (u8PinValCopy == PIN_HIGH){
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	81 30       	cpi	r24, 0x01	; 1
    1062:	09 f0       	breq	.+2      	; 0x1066 <DIO_SetPinValue+0x150>
    1064:	42 c0       	rjmp	.+132    	; 0x10ea <DIO_SetPinValue+0x1d4>
			SET_BIT(PORTC_Register,u8PinIdCopy);
    1066:	a5 e3       	ldi	r26, 0x35	; 53
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e5 e3       	ldi	r30, 0x35	; 53
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	48 2f       	mov	r20, r24
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	02 2e       	mov	r0, r18
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <DIO_SetPinValue+0x16e>
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	0a 94       	dec	r0
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <DIO_SetPinValue+0x16a>
    1088:	84 2b       	or	r24, r20
    108a:	8c 93       	st	X, r24
    108c:	2e c0       	rjmp	.+92     	; 0x10ea <DIO_SetPinValue+0x1d4>
		else {

		}
		break;
	case PORT_D:
		if(u8PinValCopy == PIN_LOW){
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	88 23       	and	r24, r24
    1092:	a9 f4       	brne	.+42     	; 0x10be <DIO_SetPinValue+0x1a8>
			CLR_BIT(PORTD_Register,u8PinIdCopy);
    1094:	a2 e3       	ldi	r26, 0x32	; 50
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e2 e3       	ldi	r30, 0x32	; 50
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	48 2f       	mov	r20, r24
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 2e       	mov	r0, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <DIO_SetPinValue+0x19c>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	0a 94       	dec	r0
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <DIO_SetPinValue+0x198>
    10b6:	80 95       	com	r24
    10b8:	84 23       	and	r24, r20
    10ba:	8c 93       	st	X, r24
    10bc:	16 c0       	rjmp	.+44     	; 0x10ea <DIO_SetPinValue+0x1d4>
		}
		else if (u8PinValCopy == PIN_HIGH){
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	81 30       	cpi	r24, 0x01	; 1
    10c2:	99 f4       	brne	.+38     	; 0x10ea <DIO_SetPinValue+0x1d4>
			SET_BIT(PORTD_Register,u8PinIdCopy);
    10c4:	a2 e3       	ldi	r26, 0x32	; 50
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e2 e3       	ldi	r30, 0x32	; 50
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	48 2f       	mov	r20, r24
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	02 2e       	mov	r0, r18
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <DIO_SetPinValue+0x1cc>
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	0a 94       	dec	r0
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <DIO_SetPinValue+0x1c8>
    10e6:	84 2b       	or	r24, r20
    10e8:	8c 93       	st	X, r24
		}
		break;
	default :
		break;
	}
}
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	cf 91       	pop	r28
    10f6:	df 91       	pop	r29
    10f8:	08 95       	ret

000010fa <DIO_GetPinValue>:
u8 DIO_GetPinValue(u8 u8PortIdCopy,u8 u8PinIdCopy){
    10fa:	df 93       	push	r29
    10fc:	cf 93       	push	r28
    10fe:	00 d0       	rcall	.+0      	; 0x1100 <DIO_GetPinValue+0x6>
    1100:	00 d0       	rcall	.+0      	; 0x1102 <DIO_GetPinValue+0x8>
    1102:	0f 92       	push	r0
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
    1108:	8a 83       	std	Y+2, r24	; 0x02
    110a:	6b 83       	std	Y+3, r22	; 0x03
	u8 u8LocalReturnCopy;
	switch(u8PortIdCopy){
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	3d 83       	std	Y+5, r19	; 0x05
    1114:	2c 83       	std	Y+4, r18	; 0x04
    1116:	4c 81       	ldd	r20, Y+4	; 0x04
    1118:	5d 81       	ldd	r21, Y+5	; 0x05
    111a:	41 30       	cpi	r20, 0x01	; 1
    111c:	51 05       	cpc	r21, r1
    111e:	41 f1       	breq	.+80     	; 0x1170 <DIO_GetPinValue+0x76>
    1120:	8c 81       	ldd	r24, Y+4	; 0x04
    1122:	9d 81       	ldd	r25, Y+5	; 0x05
    1124:	82 30       	cpi	r24, 0x02	; 2
    1126:	91 05       	cpc	r25, r1
    1128:	34 f4       	brge	.+12     	; 0x1136 <DIO_GetPinValue+0x3c>
    112a:	2c 81       	ldd	r18, Y+4	; 0x04
    112c:	3d 81       	ldd	r19, Y+5	; 0x05
    112e:	21 15       	cp	r18, r1
    1130:	31 05       	cpc	r19, r1
    1132:	61 f0       	breq	.+24     	; 0x114c <DIO_GetPinValue+0x52>
    1134:	52 c0       	rjmp	.+164    	; 0x11da <DIO_GetPinValue+0xe0>
    1136:	4c 81       	ldd	r20, Y+4	; 0x04
    1138:	5d 81       	ldd	r21, Y+5	; 0x05
    113a:	42 30       	cpi	r20, 0x02	; 2
    113c:	51 05       	cpc	r21, r1
    113e:	51 f1       	breq	.+84     	; 0x1194 <DIO_GetPinValue+0x9a>
    1140:	8c 81       	ldd	r24, Y+4	; 0x04
    1142:	9d 81       	ldd	r25, Y+5	; 0x05
    1144:	83 30       	cpi	r24, 0x03	; 3
    1146:	91 05       	cpc	r25, r1
    1148:	b9 f1       	breq	.+110    	; 0x11b8 <DIO_GetPinValue+0xbe>
    114a:	47 c0       	rjmp	.+142    	; 0x11da <DIO_GetPinValue+0xe0>
	case PORT_A:
		u8LocalReturnCopy = GET_BIT(PINA_Register,u8PinIdCopy) ;
    114c:	e9 e3       	ldi	r30, 0x39	; 57
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	88 2f       	mov	r24, r24
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	a9 01       	movw	r20, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <DIO_GetPinValue+0x6a>
    1160:	55 95       	asr	r21
    1162:	47 95       	ror	r20
    1164:	8a 95       	dec	r24
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <DIO_GetPinValue+0x66>
    1168:	ca 01       	movw	r24, r20
    116a:	81 70       	andi	r24, 0x01	; 1
    116c:	89 83       	std	Y+1, r24	; 0x01
    116e:	35 c0       	rjmp	.+106    	; 0x11da <DIO_GetPinValue+0xe0>
		break;
	case PORT_B:
		u8LocalReturnCopy = GET_BIT(PINB_Register,u8PinIdCopy) ;
    1170:	e6 e3       	ldi	r30, 0x36	; 54
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	88 2f       	mov	r24, r24
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	a9 01       	movw	r20, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <DIO_GetPinValue+0x8e>
    1184:	55 95       	asr	r21
    1186:	47 95       	ror	r20
    1188:	8a 95       	dec	r24
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <DIO_GetPinValue+0x8a>
    118c:	ca 01       	movw	r24, r20
    118e:	81 70       	andi	r24, 0x01	; 1
    1190:	89 83       	std	Y+1, r24	; 0x01
    1192:	23 c0       	rjmp	.+70     	; 0x11da <DIO_GetPinValue+0xe0>
		break;
	case PORT_C:
		u8LocalReturnCopy = GET_BIT(PINC_Register,u8PinIdCopy) ;
    1194:	e3 e3       	ldi	r30, 0x33	; 51
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	88 2f       	mov	r24, r24
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	a9 01       	movw	r20, r18
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <DIO_GetPinValue+0xb2>
    11a8:	55 95       	asr	r21
    11aa:	47 95       	ror	r20
    11ac:	8a 95       	dec	r24
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <DIO_GetPinValue+0xae>
    11b0:	ca 01       	movw	r24, r20
    11b2:	81 70       	andi	r24, 0x01	; 1
    11b4:	89 83       	std	Y+1, r24	; 0x01
    11b6:	11 c0       	rjmp	.+34     	; 0x11da <DIO_GetPinValue+0xe0>
		break;
	case PORT_D:
		u8LocalReturnCopy = GET_BIT(PIND_Register,u8PinIdCopy) ;
    11b8:	e0 e3       	ldi	r30, 0x30	; 48
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	88 2f       	mov	r24, r24
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	a9 01       	movw	r20, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <DIO_GetPinValue+0xd6>
    11cc:	55 95       	asr	r21
    11ce:	47 95       	ror	r20
    11d0:	8a 95       	dec	r24
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <DIO_GetPinValue+0xd2>
    11d4:	ca 01       	movw	r24, r20
    11d6:	81 70       	andi	r24, 0x01	; 1
    11d8:	89 83       	std	Y+1, r24	; 0x01
		break;
	default :
		break;
	}
	return u8LocalReturnCopy;
    11da:	89 81       	ldd	r24, Y+1	; 0x01
}
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	08 95       	ret

000011ec <DIO_SetPinDirection>:
void DIO_SetPinDirection(u8 u8PortIdCopy,u8 u8PinIdCopy,u8 u8PinDirCopy){
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <DIO_SetPinDirection+0x6>
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <DIO_SetPinDirection+0x8>
    11f4:	0f 92       	push	r0
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	89 83       	std	Y+1, r24	; 0x01
    11fc:	6a 83       	std	Y+2, r22	; 0x02
    11fe:	4b 83       	std	Y+3, r20	; 0x03
	switch(u8PortIdCopy){
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	3d 83       	std	Y+5, r19	; 0x05
    1208:	2c 83       	std	Y+4, r18	; 0x04
    120a:	8c 81       	ldd	r24, Y+4	; 0x04
    120c:	9d 81       	ldd	r25, Y+5	; 0x05
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	91 05       	cpc	r25, r1
    1212:	09 f4       	brne	.+2      	; 0x1216 <DIO_SetPinDirection+0x2a>
    1214:	47 c0       	rjmp	.+142    	; 0x12a4 <DIO_SetPinDirection+0xb8>
    1216:	2c 81       	ldd	r18, Y+4	; 0x04
    1218:	3d 81       	ldd	r19, Y+5	; 0x05
    121a:	22 30       	cpi	r18, 0x02	; 2
    121c:	31 05       	cpc	r19, r1
    121e:	2c f4       	brge	.+10     	; 0x122a <DIO_SetPinDirection+0x3e>
    1220:	8c 81       	ldd	r24, Y+4	; 0x04
    1222:	9d 81       	ldd	r25, Y+5	; 0x05
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	71 f0       	breq	.+28     	; 0x1244 <DIO_SetPinDirection+0x58>
    1228:	cb c0       	rjmp	.+406    	; 0x13c0 <DIO_SetPinDirection+0x1d4>
    122a:	2c 81       	ldd	r18, Y+4	; 0x04
    122c:	3d 81       	ldd	r19, Y+5	; 0x05
    122e:	22 30       	cpi	r18, 0x02	; 2
    1230:	31 05       	cpc	r19, r1
    1232:	09 f4       	brne	.+2      	; 0x1236 <DIO_SetPinDirection+0x4a>
    1234:	67 c0       	rjmp	.+206    	; 0x1304 <DIO_SetPinDirection+0x118>
    1236:	8c 81       	ldd	r24, Y+4	; 0x04
    1238:	9d 81       	ldd	r25, Y+5	; 0x05
    123a:	83 30       	cpi	r24, 0x03	; 3
    123c:	91 05       	cpc	r25, r1
    123e:	09 f4       	brne	.+2      	; 0x1242 <DIO_SetPinDirection+0x56>
    1240:	91 c0       	rjmp	.+290    	; 0x1364 <DIO_SetPinDirection+0x178>
    1242:	be c0       	rjmp	.+380    	; 0x13c0 <DIO_SetPinDirection+0x1d4>
	case PORT_A:
		if(u8PinDirCopy == PIN_INPUT){
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	88 23       	and	r24, r24
    1248:	a9 f4       	brne	.+42     	; 0x1274 <DIO_SetPinDirection+0x88>
			CLR_BIT(DDRA_Register,u8PinIdCopy);
    124a:	aa e3       	ldi	r26, 0x3A	; 58
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	ea e3       	ldi	r30, 0x3A	; 58
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <DIO_SetPinDirection+0x7c>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <DIO_SetPinDirection+0x78>
    126c:	80 95       	com	r24
    126e:	84 23       	and	r24, r20
    1270:	8c 93       	st	X, r24
    1272:	a6 c0       	rjmp	.+332    	; 0x13c0 <DIO_SetPinDirection+0x1d4>
		}
		else if (u8PinDirCopy == PIN_OUTPUT){
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	09 f0       	breq	.+2      	; 0x127c <DIO_SetPinDirection+0x90>
    127a:	a2 c0       	rjmp	.+324    	; 0x13c0 <DIO_SetPinDirection+0x1d4>
			SET_BIT(DDRA_Register,u8PinIdCopy);
    127c:	aa e3       	ldi	r26, 0x3A	; 58
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	ea e3       	ldi	r30, 0x3A	; 58
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	48 2f       	mov	r20, r24
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 2e       	mov	r0, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <DIO_SetPinDirection+0xae>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <DIO_SetPinDirection+0xaa>
    129e:	84 2b       	or	r24, r20
    12a0:	8c 93       	st	X, r24
    12a2:	8e c0       	rjmp	.+284    	; 0x13c0 <DIO_SetPinDirection+0x1d4>
		}
		else {
		}
		break;
	case PORT_B:
		if(u8PinDirCopy == PIN_INPUT){
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	88 23       	and	r24, r24
    12a8:	a9 f4       	brne	.+42     	; 0x12d4 <DIO_SetPinDirection+0xe8>
			CLR_BIT(DDRB_Register,u8PinIdCopy);
    12aa:	a7 e3       	ldi	r26, 0x37	; 55
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e7 e3       	ldi	r30, 0x37	; 55
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	48 2f       	mov	r20, r24
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	02 2e       	mov	r0, r18
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <DIO_SetPinDirection+0xdc>
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	0a 94       	dec	r0
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <DIO_SetPinDirection+0xd8>
    12cc:	80 95       	com	r24
    12ce:	84 23       	and	r24, r20
    12d0:	8c 93       	st	X, r24
    12d2:	76 c0       	rjmp	.+236    	; 0x13c0 <DIO_SetPinDirection+0x1d4>
		}
		else if (u8PinDirCopy == PIN_OUTPUT){
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	81 30       	cpi	r24, 0x01	; 1
    12d8:	09 f0       	breq	.+2      	; 0x12dc <DIO_SetPinDirection+0xf0>
    12da:	72 c0       	rjmp	.+228    	; 0x13c0 <DIO_SetPinDirection+0x1d4>
			SET_BIT(DDRB_Register,u8PinIdCopy);
    12dc:	a7 e3       	ldi	r26, 0x37	; 55
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e7 e3       	ldi	r30, 0x37	; 55
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <DIO_SetPinDirection+0x10e>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <DIO_SetPinDirection+0x10a>
    12fe:	84 2b       	or	r24, r20
    1300:	8c 93       	st	X, r24
    1302:	5e c0       	rjmp	.+188    	; 0x13c0 <DIO_SetPinDirection+0x1d4>
		}
		else {
		}
		break;
	case PORT_C:
		if(u8PinDirCopy == PIN_INPUT){
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	88 23       	and	r24, r24
    1308:	a9 f4       	brne	.+42     	; 0x1334 <DIO_SetPinDirection+0x148>
			CLR_BIT(DDRC_Register,u8PinIdCopy);
    130a:	a4 e3       	ldi	r26, 0x34	; 52
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	e4 e3       	ldi	r30, 0x34	; 52
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	48 2f       	mov	r20, r24
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	02 2e       	mov	r0, r18
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <DIO_SetPinDirection+0x13c>
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	0a 94       	dec	r0
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <DIO_SetPinDirection+0x138>
    132c:	80 95       	com	r24
    132e:	84 23       	and	r24, r20
    1330:	8c 93       	st	X, r24
    1332:	46 c0       	rjmp	.+140    	; 0x13c0 <DIO_SetPinDirection+0x1d4>
		}
		else if (u8PinDirCopy == PIN_OUTPUT){
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	09 f0       	breq	.+2      	; 0x133c <DIO_SetPinDirection+0x150>
    133a:	42 c0       	rjmp	.+132    	; 0x13c0 <DIO_SetPinDirection+0x1d4>
			SET_BIT(DDRC_Register,u8PinIdCopy);
    133c:	a4 e3       	ldi	r26, 0x34	; 52
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	e4 e3       	ldi	r30, 0x34	; 52
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	48 2f       	mov	r20, r24
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	02 2e       	mov	r0, r18
    1354:	02 c0       	rjmp	.+4      	; 0x135a <DIO_SetPinDirection+0x16e>
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	0a 94       	dec	r0
    135c:	e2 f7       	brpl	.-8      	; 0x1356 <DIO_SetPinDirection+0x16a>
    135e:	84 2b       	or	r24, r20
    1360:	8c 93       	st	X, r24
    1362:	2e c0       	rjmp	.+92     	; 0x13c0 <DIO_SetPinDirection+0x1d4>
		}
		else {
		}
		break;
	case PORT_D:
		if(u8PinDirCopy == PIN_INPUT){
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	88 23       	and	r24, r24
    1368:	a9 f4       	brne	.+42     	; 0x1394 <DIO_SetPinDirection+0x1a8>
			CLR_BIT(DDRD_Register,u8PinIdCopy);
    136a:	a1 e3       	ldi	r26, 0x31	; 49
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e1 e3       	ldi	r30, 0x31	; 49
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	48 2f       	mov	r20, r24
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	02 2e       	mov	r0, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <DIO_SetPinDirection+0x19c>
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	0a 94       	dec	r0
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <DIO_SetPinDirection+0x198>
    138c:	80 95       	com	r24
    138e:	84 23       	and	r24, r20
    1390:	8c 93       	st	X, r24
    1392:	16 c0       	rjmp	.+44     	; 0x13c0 <DIO_SetPinDirection+0x1d4>
		}
		else if (u8PinDirCopy == PIN_OUTPUT){
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	81 30       	cpi	r24, 0x01	; 1
    1398:	99 f4       	brne	.+38     	; 0x13c0 <DIO_SetPinDirection+0x1d4>
			SET_BIT(DDRD_Register,u8PinIdCopy);
    139a:	a1 e3       	ldi	r26, 0x31	; 49
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e1 e3       	ldi	r30, 0x31	; 49
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	48 2f       	mov	r20, r24
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	02 2e       	mov	r0, r18
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <DIO_SetPinDirection+0x1cc>
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	0a 94       	dec	r0
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <DIO_SetPinDirection+0x1c8>
    13bc:	84 2b       	or	r24, r20
    13be:	8c 93       	st	X, r24
		}
		break;
	default :
		break;
	}
}
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	08 95       	ret

000013d0 <DIO_TogglePinValue>:
void DIO_TogglePinValue(u8 u8PortIdCopy,u8 u8PinIdCopy){
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	00 d0       	rcall	.+0      	; 0x13d6 <DIO_TogglePinValue+0x6>
    13d6:	00 d0       	rcall	.+0      	; 0x13d8 <DIO_TogglePinValue+0x8>
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
    13dc:	89 83       	std	Y+1, r24	; 0x01
    13de:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortIdCopy){
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	3c 83       	std	Y+4, r19	; 0x04
    13e8:	2b 83       	std	Y+3, r18	; 0x03
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	9c 81       	ldd	r25, Y+4	; 0x04
    13ee:	81 30       	cpi	r24, 0x01	; 1
    13f0:	91 05       	cpc	r25, r1
    13f2:	49 f1       	breq	.+82     	; 0x1446 <DIO_TogglePinValue+0x76>
    13f4:	2b 81       	ldd	r18, Y+3	; 0x03
    13f6:	3c 81       	ldd	r19, Y+4	; 0x04
    13f8:	22 30       	cpi	r18, 0x02	; 2
    13fa:	31 05       	cpc	r19, r1
    13fc:	2c f4       	brge	.+10     	; 0x1408 <DIO_TogglePinValue+0x38>
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	9c 81       	ldd	r25, Y+4	; 0x04
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	61 f0       	breq	.+24     	; 0x141e <DIO_TogglePinValue+0x4e>
    1406:	5a c0       	rjmp	.+180    	; 0x14bc <DIO_TogglePinValue+0xec>
    1408:	2b 81       	ldd	r18, Y+3	; 0x03
    140a:	3c 81       	ldd	r19, Y+4	; 0x04
    140c:	22 30       	cpi	r18, 0x02	; 2
    140e:	31 05       	cpc	r19, r1
    1410:	71 f1       	breq	.+92     	; 0x146e <DIO_TogglePinValue+0x9e>
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	9c 81       	ldd	r25, Y+4	; 0x04
    1416:	83 30       	cpi	r24, 0x03	; 3
    1418:	91 05       	cpc	r25, r1
    141a:	e9 f1       	breq	.+122    	; 0x1496 <DIO_TogglePinValue+0xc6>
    141c:	4f c0       	rjmp	.+158    	; 0x14bc <DIO_TogglePinValue+0xec>
		case PORT_A:
			TOG_BIT(PORTA_Register,u8PinIdCopy);
    141e:	ab e3       	ldi	r26, 0x3B	; 59
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	eb e3       	ldi	r30, 0x3B	; 59
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	48 2f       	mov	r20, r24
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	02 2e       	mov	r0, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <DIO_TogglePinValue+0x6c>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	0a 94       	dec	r0
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <DIO_TogglePinValue+0x68>
    1440:	84 27       	eor	r24, r20
    1442:	8c 93       	st	X, r24
    1444:	3b c0       	rjmp	.+118    	; 0x14bc <DIO_TogglePinValue+0xec>
			break;
		case PORT_B:
			TOG_BIT(PORTB_Register,u8PinIdCopy);
    1446:	a8 e3       	ldi	r26, 0x38	; 56
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e8 e3       	ldi	r30, 0x38	; 56
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	48 2f       	mov	r20, r24
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	02 2e       	mov	r0, r18
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <DIO_TogglePinValue+0x94>
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	0a 94       	dec	r0
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <DIO_TogglePinValue+0x90>
    1468:	84 27       	eor	r24, r20
    146a:	8c 93       	st	X, r24
    146c:	27 c0       	rjmp	.+78     	; 0x14bc <DIO_TogglePinValue+0xec>
			break;
		case PORT_C:
			TOG_BIT(PORTC_Register,u8PinIdCopy);
    146e:	a5 e3       	ldi	r26, 0x35	; 53
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e5 e3       	ldi	r30, 0x35	; 53
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	48 2f       	mov	r20, r24
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	02 2e       	mov	r0, r18
    1486:	02 c0       	rjmp	.+4      	; 0x148c <DIO_TogglePinValue+0xbc>
    1488:	88 0f       	add	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	0a 94       	dec	r0
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <DIO_TogglePinValue+0xb8>
    1490:	84 27       	eor	r24, r20
    1492:	8c 93       	st	X, r24
    1494:	13 c0       	rjmp	.+38     	; 0x14bc <DIO_TogglePinValue+0xec>
			break;
		case PORT_D:
			TOG_BIT(PORTD_Register,u8PinIdCopy);
    1496:	a2 e3       	ldi	r26, 0x32	; 50
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	e2 e3       	ldi	r30, 0x32	; 50
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	48 2f       	mov	r20, r24
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	02 2e       	mov	r0, r18
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <DIO_TogglePinValue+0xe4>
    14b0:	88 0f       	add	r24, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	0a 94       	dec	r0
    14b6:	e2 f7       	brpl	.-8      	; 0x14b0 <DIO_TogglePinValue+0xe0>
    14b8:	84 27       	eor	r24, r20
    14ba:	8c 93       	st	X, r24
			break;
		default :
			break;
	}

}
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	cf 91       	pop	r28
    14c6:	df 91       	pop	r29
    14c8:	08 95       	ret

000014ca <EXT_INTERRUPT_VID_INTI>:

void (*EXTI0_CALLBACK_PTR)(void)=0;
void (*EXTI1_CALLBACK_PTR)(void)=0;
void (*EXTI2_CALLBACK_PTR)(void)=0;

void EXT_INTERRUPT_VID_INTI(void){
    14ca:	df 93       	push	r29
    14cc:	cf 93       	push	r28
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
     #if EXT0_MODE==LOW_LEVEL
     	CLR_BIT(MCUCR,ISC00);
    14d2:	a5 e5       	ldi	r26, 0x55	; 85
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	e5 e5       	ldi	r30, 0x55	; 85
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	8e 7f       	andi	r24, 0xFE	; 254
    14de:	8c 93       	st	X, r24
     	CLR_BIT(MCUCR,ISC01);
    14e0:	a5 e5       	ldi	r26, 0x55	; 85
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e5 e5       	ldi	r30, 0x55	; 85
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	8d 7f       	andi	r24, 0xFD	; 253
    14ec:	8c 93       	st	X, r24
#endif
     #if EXT1_MODE==LOW_LEVEL
     	CLR_BIT(MCUCR,ISC10);
     	CLR_BIT(MCUCR,ISC11);
     #elif EXT1_MODE==IOC
    	SET_BIT(MCUCR,ISC10);
    14ee:	a5 e5       	ldi	r26, 0x55	; 85
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	e5 e5       	ldi	r30, 0x55	; 85
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	84 60       	ori	r24, 0x04	; 4
    14fa:	8c 93       	st	X, r24
	    CLR_BIT(MCUCR,ISC11);
    14fc:	a5 e5       	ldi	r26, 0x55	; 85
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	e5 e5       	ldi	r30, 0x55	; 85
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	87 7f       	andi	r24, 0xF7	; 247
    1508:	8c 93       	st	X, r24
    #if EXT2_MODE==FALLING_EDGE
		CLR_BIT(MCUCSR,ISC2);
    #elif EXT2_MODE==RISING_EDGE
		SET_BIT(MCUCSR,ISC2);
#endif
}
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <EXT_INTERRUPT_VID_ENABLE>:
void EXT_INTERRUPT_VID_ENABLE(u8 interrupt_number){
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	00 d0       	rcall	.+0      	; 0x1516 <EXT_INTERRUPT_VID_ENABLE+0x6>
    1516:	0f 92       	push	r0
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	89 83       	std	Y+1, r24	; 0x01
	 switch (interrupt_number){
    151e:	89 81       	ldd	r24, Y+1	; 0x01
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	3b 83       	std	Y+3, r19	; 0x03
    1526:	2a 83       	std	Y+2, r18	; 0x02
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	9b 81       	ldd	r25, Y+3	; 0x03
    152c:	81 30       	cpi	r24, 0x01	; 1
    152e:	91 05       	cpc	r25, r1
    1530:	89 f0       	breq	.+34     	; 0x1554 <EXT_INTERRUPT_VID_ENABLE+0x44>
    1532:	2a 81       	ldd	r18, Y+2	; 0x02
    1534:	3b 81       	ldd	r19, Y+3	; 0x03
    1536:	22 30       	cpi	r18, 0x02	; 2
    1538:	31 05       	cpc	r19, r1
    153a:	a1 f0       	breq	.+40     	; 0x1564 <EXT_INTERRUPT_VID_ENABLE+0x54>
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	9b 81       	ldd	r25, Y+3	; 0x03
    1540:	00 97       	sbiw	r24, 0x00	; 0
    1542:	b9 f4       	brne	.+46     	; 0x1572 <EXT_INTERRUPT_VID_ENABLE+0x62>
	        case(EXT0):
		         SET_BIT(GICR,INT0);
    1544:	ab e5       	ldi	r26, 0x5B	; 91
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	eb e5       	ldi	r30, 0x5B	; 91
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	80 64       	ori	r24, 0x40	; 64
    1550:	8c 93       	st	X, r24
    1552:	0f c0       	rjmp	.+30     	; 0x1572 <EXT_INTERRUPT_VID_ENABLE+0x62>
	             break;
	        case(EXT1):
		         SET_BIT(GICR,INT1);
    1554:	ab e5       	ldi	r26, 0x5B	; 91
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	eb e5       	ldi	r30, 0x5B	; 91
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	80 68       	ori	r24, 0x80	; 128
    1560:	8c 93       	st	X, r24
    1562:	07 c0       	rjmp	.+14     	; 0x1572 <EXT_INTERRUPT_VID_ENABLE+0x62>
	             break;
	        case(EXT2):
		         SET_BIT(GICR,INT2);
    1564:	ab e5       	ldi	r26, 0x5B	; 91
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	eb e5       	ldi	r30, 0x5B	; 91
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	80 62       	ori	r24, 0x20	; 32
    1570:	8c 93       	st	X, r24
	             break;
	 }
}
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <EXT_INTERRUPT_VID_DISABLE>:
void EXT_INTERRUPT_VID_DISABLE(u8 interrupt_number){
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	00 d0       	rcall	.+0      	; 0x1584 <EXT_INTERRUPT_VID_DISABLE+0x6>
    1584:	0f 92       	push	r0
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	89 83       	std	Y+1, r24	; 0x01
	switch (interrupt_number){
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	3b 83       	std	Y+3, r19	; 0x03
    1594:	2a 83       	std	Y+2, r18	; 0x02
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	9b 81       	ldd	r25, Y+3	; 0x03
    159a:	81 30       	cpi	r24, 0x01	; 1
    159c:	91 05       	cpc	r25, r1
    159e:	89 f0       	breq	.+34     	; 0x15c2 <EXT_INTERRUPT_VID_DISABLE+0x44>
    15a0:	2a 81       	ldd	r18, Y+2	; 0x02
    15a2:	3b 81       	ldd	r19, Y+3	; 0x03
    15a4:	22 30       	cpi	r18, 0x02	; 2
    15a6:	31 05       	cpc	r19, r1
    15a8:	a1 f0       	breq	.+40     	; 0x15d2 <EXT_INTERRUPT_VID_DISABLE+0x54>
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	9b 81       	ldd	r25, Y+3	; 0x03
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	b9 f4       	brne	.+46     	; 0x15e0 <EXT_INTERRUPT_VID_DISABLE+0x62>
		    case(EXT0):
		        CLR_BIT(GICR,INT0);
    15b2:	ab e5       	ldi	r26, 0x5B	; 91
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	eb e5       	ldi	r30, 0x5B	; 91
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	8f 7b       	andi	r24, 0xBF	; 191
    15be:	8c 93       	st	X, r24
    15c0:	0f c0       	rjmp	.+30     	; 0x15e0 <EXT_INTERRUPT_VID_DISABLE+0x62>
		        break;
		    case(EXT1):
		        CLR_BIT(GICR,INT1);
    15c2:	ab e5       	ldi	r26, 0x5B	; 91
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	eb e5       	ldi	r30, 0x5B	; 91
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	8f 77       	andi	r24, 0x7F	; 127
    15ce:	8c 93       	st	X, r24
    15d0:	07 c0       	rjmp	.+14     	; 0x15e0 <EXT_INTERRUPT_VID_DISABLE+0x62>
		        break;
		    case(EXT2):
		        CLR_BIT(GICR,INT2);
    15d2:	ab e5       	ldi	r26, 0x5B	; 91
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	eb e5       	ldi	r30, 0x5B	; 91
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	8f 7d       	andi	r24, 0xDF	; 223
    15de:	8c 93       	st	X, r24
		        break;
	}
}
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	cf 91       	pop	r28
    15e8:	df 91       	pop	r29
    15ea:	08 95       	ret

000015ec <EXT0_VID_SET_CALL_BACK>:
void EXT0_VID_SET_CALL_BACK(void (*PTR)(void)){
    15ec:	df 93       	push	r29
    15ee:	cf 93       	push	r28
    15f0:	00 d0       	rcall	.+0      	; 0x15f2 <EXT0_VID_SET_CALL_BACK+0x6>
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	9a 83       	std	Y+2, r25	; 0x02
    15f8:	89 83       	std	Y+1, r24	; 0x01
	EXTI0_CALLBACK_PTR=PTR;
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	9a 81       	ldd	r25, Y+2	; 0x02
    15fe:	90 93 7b 00 	sts	0x007B, r25
    1602:	80 93 7a 00 	sts	0x007A, r24
}
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	08 95       	ret

00001610 <EXT1_VID_SET_CALL_BACK>:
void EXT1_VID_SET_CALL_BACK(void (*PTR)(void)){
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	00 d0       	rcall	.+0      	; 0x1616 <EXT1_VID_SET_CALL_BACK+0x6>
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
    161a:	9a 83       	std	Y+2, r25	; 0x02
    161c:	89 83       	std	Y+1, r24	; 0x01
	EXTI1_CALLBACK_PTR=PTR;
    161e:	89 81       	ldd	r24, Y+1	; 0x01
    1620:	9a 81       	ldd	r25, Y+2	; 0x02
    1622:	90 93 7d 00 	sts	0x007D, r25
    1626:	80 93 7c 00 	sts	0x007C, r24
}
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <EXT2_VID_SET_CALL_BACK>:
void EXT2_VID_SET_CALL_BACK(void (*PTR)(void)){
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	00 d0       	rcall	.+0      	; 0x163a <EXT2_VID_SET_CALL_BACK+0x6>
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	9a 83       	std	Y+2, r25	; 0x02
    1640:	89 83       	std	Y+1, r24	; 0x01
	EXTI2_CALLBACK_PTR=PTR;
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	9a 81       	ldd	r25, Y+2	; 0x02
    1646:	90 93 7f 00 	sts	0x007F, r25
    164a:	80 93 7e 00 	sts	0x007E, r24
}
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	08 95       	ret

00001658 <__vector_1>:
void __vector_1 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_1 (void){
    1658:	1f 92       	push	r1
    165a:	0f 92       	push	r0
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	0f 92       	push	r0
    1660:	11 24       	eor	r1, r1
    1662:	2f 93       	push	r18
    1664:	3f 93       	push	r19
    1666:	4f 93       	push	r20
    1668:	5f 93       	push	r21
    166a:	6f 93       	push	r22
    166c:	7f 93       	push	r23
    166e:	8f 93       	push	r24
    1670:	9f 93       	push	r25
    1672:	af 93       	push	r26
    1674:	bf 93       	push	r27
    1676:	ef 93       	push	r30
    1678:	ff 93       	push	r31
    167a:	df 93       	push	r29
    167c:	cf 93       	push	r28
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    EXTI0_CALLBACK_PTR();
    1682:	e0 91 7a 00 	lds	r30, 0x007A
    1686:	f0 91 7b 00 	lds	r31, 0x007B
    168a:	09 95       	icall
}
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	ff 91       	pop	r31
    1692:	ef 91       	pop	r30
    1694:	bf 91       	pop	r27
    1696:	af 91       	pop	r26
    1698:	9f 91       	pop	r25
    169a:	8f 91       	pop	r24
    169c:	7f 91       	pop	r23
    169e:	6f 91       	pop	r22
    16a0:	5f 91       	pop	r21
    16a2:	4f 91       	pop	r20
    16a4:	3f 91       	pop	r19
    16a6:	2f 91       	pop	r18
    16a8:	0f 90       	pop	r0
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	0f 90       	pop	r0
    16ae:	1f 90       	pop	r1
    16b0:	18 95       	reti

000016b2 <__vector_2>:
void __vector_2 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_2 (void){
    16b2:	1f 92       	push	r1
    16b4:	0f 92       	push	r0
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	0f 92       	push	r0
    16ba:	11 24       	eor	r1, r1
    16bc:	2f 93       	push	r18
    16be:	3f 93       	push	r19
    16c0:	4f 93       	push	r20
    16c2:	5f 93       	push	r21
    16c4:	6f 93       	push	r22
    16c6:	7f 93       	push	r23
    16c8:	8f 93       	push	r24
    16ca:	9f 93       	push	r25
    16cc:	af 93       	push	r26
    16ce:	bf 93       	push	r27
    16d0:	ef 93       	push	r30
    16d2:	ff 93       	push	r31
    16d4:	df 93       	push	r29
    16d6:	cf 93       	push	r28
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
	EXTI1_CALLBACK_PTR();
    16dc:	e0 91 7c 00 	lds	r30, 0x007C
    16e0:	f0 91 7d 00 	lds	r31, 0x007D
    16e4:	09 95       	icall
}
    16e6:	cf 91       	pop	r28
    16e8:	df 91       	pop	r29
    16ea:	ff 91       	pop	r31
    16ec:	ef 91       	pop	r30
    16ee:	bf 91       	pop	r27
    16f0:	af 91       	pop	r26
    16f2:	9f 91       	pop	r25
    16f4:	8f 91       	pop	r24
    16f6:	7f 91       	pop	r23
    16f8:	6f 91       	pop	r22
    16fa:	5f 91       	pop	r21
    16fc:	4f 91       	pop	r20
    16fe:	3f 91       	pop	r19
    1700:	2f 91       	pop	r18
    1702:	0f 90       	pop	r0
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	0f 90       	pop	r0
    1708:	1f 90       	pop	r1
    170a:	18 95       	reti

0000170c <__vector_3>:
void __vector_3 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_3 (void){
    170c:	1f 92       	push	r1
    170e:	0f 92       	push	r0
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	0f 92       	push	r0
    1714:	11 24       	eor	r1, r1
    1716:	2f 93       	push	r18
    1718:	3f 93       	push	r19
    171a:	4f 93       	push	r20
    171c:	5f 93       	push	r21
    171e:	6f 93       	push	r22
    1720:	7f 93       	push	r23
    1722:	8f 93       	push	r24
    1724:	9f 93       	push	r25
    1726:	af 93       	push	r26
    1728:	bf 93       	push	r27
    172a:	ef 93       	push	r30
    172c:	ff 93       	push	r31
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
	EXTI2_CALLBACK_PTR();
    1736:	e0 91 7e 00 	lds	r30, 0x007E
    173a:	f0 91 7f 00 	lds	r31, 0x007F
    173e:	09 95       	icall
}
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	ff 91       	pop	r31
    1746:	ef 91       	pop	r30
    1748:	bf 91       	pop	r27
    174a:	af 91       	pop	r26
    174c:	9f 91       	pop	r25
    174e:	8f 91       	pop	r24
    1750:	7f 91       	pop	r23
    1752:	6f 91       	pop	r22
    1754:	5f 91       	pop	r21
    1756:	4f 91       	pop	r20
    1758:	3f 91       	pop	r19
    175a:	2f 91       	pop	r18
    175c:	0f 90       	pop	r0
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	0f 90       	pop	r0
    1762:	1f 90       	pop	r1
    1764:	18 95       	reti

00001766 <Global_Interrupt_Enable>:
#include "BIT_MATH.h"

#include "Global_Interrupt_interface.h"
#include "Global_Interrupt_register.h"

void Global_Interrupt_Enable(void){
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(SREG,I);
    176e:	af e5       	ldi	r26, 0x5F	; 95
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	ef e5       	ldi	r30, 0x5F	; 95
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	80 68       	ori	r24, 0x80	; 128
    177a:	8c 93       	st	X, r24

}
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret

00001782 <Global_Interrupt_disable>:

void Global_Interrupt_disable(void){
    1782:	df 93       	push	r29
    1784:	cf 93       	push	r28
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(SREG,I);
    178a:	af e5       	ldi	r26, 0x5F	; 95
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	ef e5       	ldi	r30, 0x5F	; 95
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	8f 77       	andi	r24, 0x7F	; 127
    1796:	8c 93       	st	X, r24

}
    1798:	cf 91       	pop	r28
    179a:	df 91       	pop	r29
    179c:	08 95       	ret

0000179e <KPD_init>:
};




void KPD_init(void){
    179e:	df 93       	push	r29
    17a0:	cf 93       	push	r28
    17a2:	0f 92       	push	r0
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
	u8 i;
	for(i=ROW_START;i<=ROW_END;i++){
    17a8:	19 82       	std	Y+1, r1	; 0x01
    17aa:	0d c0       	rjmp	.+26     	; 0x17c6 <KPD_init+0x28>
		DIO_SetPinDirection(KPD_PORT,i,PIN_INPUT);
    17ac:	83 e0       	ldi	r24, 0x03	; 3
    17ae:	69 81       	ldd	r22, Y+1	; 0x01
    17b0:	40 e0       	ldi	r20, 0x00	; 0
    17b2:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_SetPinDirection>
		DIO_SetPinValue(KPD_PORT,i,PIN_HIGH);
    17b6:	83 e0       	ldi	r24, 0x03	; 3
    17b8:	69 81       	ldd	r22, Y+1	; 0x01
    17ba:	41 e0       	ldi	r20, 0x01	; 1
    17bc:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>



void KPD_init(void){
	u8 i;
	for(i=ROW_START;i<=ROW_END;i++){
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	8f 5f       	subi	r24, 0xFF	; 255
    17c4:	89 83       	std	Y+1, r24	; 0x01
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	84 30       	cpi	r24, 0x04	; 4
    17ca:	80 f3       	brcs	.-32     	; 0x17ac <KPD_init+0xe>
		DIO_SetPinDirection(KPD_PORT,i,PIN_INPUT);
		DIO_SetPinValue(KPD_PORT,i,PIN_HIGH);


	}
	for(i=COLUMN_START;i<=COLUMN_END;i++){
    17cc:	84 e0       	ldi	r24, 0x04	; 4
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	0d c0       	rjmp	.+26     	; 0x17ec <KPD_init+0x4e>
		DIO_SetPinDirection(KPD_PORT,i,PIN_OUTPUT);
    17d2:	83 e0       	ldi	r24, 0x03	; 3
    17d4:	69 81       	ldd	r22, Y+1	; 0x01
    17d6:	41 e0       	ldi	r20, 0x01	; 1
    17d8:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_SetPinDirection>
		DIO_SetPinValue(KPD_PORT,i,PIN_HIGH);
    17dc:	83 e0       	ldi	r24, 0x03	; 3
    17de:	69 81       	ldd	r22, Y+1	; 0x01
    17e0:	41 e0       	ldi	r20, 0x01	; 1
    17e2:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>
		DIO_SetPinDirection(KPD_PORT,i,PIN_INPUT);
		DIO_SetPinValue(KPD_PORT,i,PIN_HIGH);


	}
	for(i=COLUMN_START;i<=COLUMN_END;i++){
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
    17e8:	8f 5f       	subi	r24, 0xFF	; 255
    17ea:	89 83       	std	Y+1, r24	; 0x01
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	88 30       	cpi	r24, 0x08	; 8
    17f0:	80 f3       	brcs	.-32     	; 0x17d2 <KPD_init+0x34>
		DIO_SetPinDirection(KPD_PORT,i,PIN_OUTPUT);
		DIO_SetPinValue(KPD_PORT,i,PIN_HIGH);


	}
}
    17f2:	0f 90       	pop	r0
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	08 95       	ret

000017fa <KPD_GetKey>:
u8 KPD_GetKey(void){
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	64 97       	sbiw	r28, 0x14	; 20
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	f8 94       	cli
    1808:	de bf       	out	0x3e, r29	; 62
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	cd bf       	out	0x3d, r28	; 61
	u8 KEY=0xff;
    180e:	8f ef       	ldi	r24, 0xFF	; 255
    1810:	8c 8b       	std	Y+20, r24	; 0x14
	u8 i,j,k;
	u8 result;
	u8 exitflag=0;
    1812:	1f 86       	std	Y+15, r1	; 0x0f

	for(i=0;i<4;i++){
    1814:	1b 8a       	std	Y+19, r1	; 0x13
    1816:	b6 c0       	rjmp	.+364    	; 0x1984 <KPD_GetKey+0x18a>
		for(k=COLUMN_START;k<=COLUMN_END;k++){
    1818:	84 e0       	ldi	r24, 0x04	; 4
    181a:	89 8b       	std	Y+17, r24	; 0x11
    181c:	08 c0       	rjmp	.+16     	; 0x182e <KPD_GetKey+0x34>
			DIO_SetPinValue(KPD_PORT,k,PIN_HIGH);
    181e:	83 e0       	ldi	r24, 0x03	; 3
    1820:	69 89       	ldd	r22, Y+17	; 0x11
    1822:	41 e0       	ldi	r20, 0x01	; 1
    1824:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>
	u8 i,j,k;
	u8 result;
	u8 exitflag=0;

	for(i=0;i<4;i++){
		for(k=COLUMN_START;k<=COLUMN_END;k++){
    1828:	89 89       	ldd	r24, Y+17	; 0x11
    182a:	8f 5f       	subi	r24, 0xFF	; 255
    182c:	89 8b       	std	Y+17, r24	; 0x11
    182e:	89 89       	ldd	r24, Y+17	; 0x11
    1830:	88 30       	cpi	r24, 0x08	; 8
    1832:	a8 f3       	brcs	.-22     	; 0x181e <KPD_GetKey+0x24>
			DIO_SetPinValue(KPD_PORT,k,PIN_HIGH);
		}
		DIO_SetPinValue(KPD_PORT,(COLUMN_START+i),PIN_LOW);
    1834:	8b 89       	ldd	r24, Y+19	; 0x13
    1836:	98 2f       	mov	r25, r24
    1838:	9c 5f       	subi	r25, 0xFC	; 252
    183a:	83 e0       	ldi	r24, 0x03	; 3
    183c:	69 2f       	mov	r22, r25
    183e:	40 e0       	ldi	r20, 0x00	; 0
    1840:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>
		for(j=0;j<4;j++){
    1844:	1a 8a       	std	Y+18, r1	; 0x12
    1846:	94 c0       	rjmp	.+296    	; 0x1970 <KPD_GetKey+0x176>
			result =DIO_GetPinValue(KPD_PORT,(ROW_START+j));
    1848:	83 e0       	ldi	r24, 0x03	; 3
    184a:	6a 89       	ldd	r22, Y+18	; 0x12
    184c:	0e 94 7d 08 	call	0x10fa	; 0x10fa <DIO_GetPinValue>
    1850:	88 8b       	std	Y+16, r24	; 0x10
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	a0 ea       	ldi	r26, 0xA0	; 160
    1858:	b1 e4       	ldi	r27, 0x41	; 65
    185a:	8b 87       	std	Y+11, r24	; 0x0b
    185c:	9c 87       	std	Y+12, r25	; 0x0c
    185e:	ad 87       	std	Y+13, r26	; 0x0d
    1860:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1862:	6b 85       	ldd	r22, Y+11	; 0x0b
    1864:	7c 85       	ldd	r23, Y+12	; 0x0c
    1866:	8d 85       	ldd	r24, Y+13	; 0x0d
    1868:	9e 85       	ldd	r25, Y+14	; 0x0e
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	4a ef       	ldi	r20, 0xFA	; 250
    1870:	54 e4       	ldi	r21, 0x44	; 68
    1872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	8f 83       	std	Y+7, r24	; 0x07
    187c:	98 87       	std	Y+8, r25	; 0x08
    187e:	a9 87       	std	Y+9, r26	; 0x09
    1880:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1882:	6f 81       	ldd	r22, Y+7	; 0x07
    1884:	78 85       	ldd	r23, Y+8	; 0x08
    1886:	89 85       	ldd	r24, Y+9	; 0x09
    1888:	9a 85       	ldd	r25, Y+10	; 0x0a
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	40 e8       	ldi	r20, 0x80	; 128
    1890:	5f e3       	ldi	r21, 0x3F	; 63
    1892:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1896:	88 23       	and	r24, r24
    1898:	2c f4       	brge	.+10     	; 0x18a4 <KPD_GetKey+0xaa>
		__ticks = 1;
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	9e 83       	std	Y+6, r25	; 0x06
    18a0:	8d 83       	std	Y+5, r24	; 0x05
    18a2:	3f c0       	rjmp	.+126    	; 0x1922 <KPD_GetKey+0x128>
	else if (__tmp > 65535)
    18a4:	6f 81       	ldd	r22, Y+7	; 0x07
    18a6:	78 85       	ldd	r23, Y+8	; 0x08
    18a8:	89 85       	ldd	r24, Y+9	; 0x09
    18aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	3f ef       	ldi	r19, 0xFF	; 255
    18b0:	4f e7       	ldi	r20, 0x7F	; 127
    18b2:	57 e4       	ldi	r21, 0x47	; 71
    18b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18b8:	18 16       	cp	r1, r24
    18ba:	4c f5       	brge	.+82     	; 0x190e <KPD_GetKey+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    18be:	7c 85       	ldd	r23, Y+12	; 0x0c
    18c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	40 e2       	ldi	r20, 0x20	; 32
    18ca:	51 e4       	ldi	r21, 0x41	; 65
    18cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	bc 01       	movw	r22, r24
    18d6:	cd 01       	movw	r24, r26
    18d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	9e 83       	std	Y+6, r25	; 0x06
    18e2:	8d 83       	std	Y+5, r24	; 0x05
    18e4:	0f c0       	rjmp	.+30     	; 0x1904 <KPD_GetKey+0x10a>
    18e6:	88 ec       	ldi	r24, 0xC8	; 200
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	9c 83       	std	Y+4, r25	; 0x04
    18ec:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	9c 81       	ldd	r25, Y+4	; 0x04
    18f2:	01 97       	sbiw	r24, 0x01	; 1
    18f4:	f1 f7       	brne	.-4      	; 0x18f2 <KPD_GetKey+0xf8>
    18f6:	9c 83       	std	Y+4, r25	; 0x04
    18f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18fa:	8d 81       	ldd	r24, Y+5	; 0x05
    18fc:	9e 81       	ldd	r25, Y+6	; 0x06
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	9e 83       	std	Y+6, r25	; 0x06
    1902:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1904:	8d 81       	ldd	r24, Y+5	; 0x05
    1906:	9e 81       	ldd	r25, Y+6	; 0x06
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	69 f7       	brne	.-38     	; 0x18e6 <KPD_GetKey+0xec>
    190c:	14 c0       	rjmp	.+40     	; 0x1936 <KPD_GetKey+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    190e:	6f 81       	ldd	r22, Y+7	; 0x07
    1910:	78 85       	ldd	r23, Y+8	; 0x08
    1912:	89 85       	ldd	r24, Y+9	; 0x09
    1914:	9a 85       	ldd	r25, Y+10	; 0x0a
    1916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	9e 83       	std	Y+6, r25	; 0x06
    1920:	8d 83       	std	Y+5, r24	; 0x05
    1922:	8d 81       	ldd	r24, Y+5	; 0x05
    1924:	9e 81       	ldd	r25, Y+6	; 0x06
    1926:	9a 83       	std	Y+2, r25	; 0x02
    1928:	89 83       	std	Y+1, r24	; 0x01
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	9a 81       	ldd	r25, Y+2	; 0x02
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	f1 f7       	brne	.-4      	; 0x192e <KPD_GetKey+0x134>
    1932:	9a 83       	std	Y+2, r25	; 0x02
    1934:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(20);
			if(result==0){
    1936:	88 89       	ldd	r24, Y+16	; 0x10
    1938:	88 23       	and	r24, r24
    193a:	b9 f4       	brne	.+46     	; 0x196a <KPD_GetKey+0x170>
				KEY=KPD_arr[j][i];
    193c:	8a 89       	ldd	r24, Y+18	; 0x12
    193e:	48 2f       	mov	r20, r24
    1940:	50 e0       	ldi	r21, 0x00	; 0
    1942:	8b 89       	ldd	r24, Y+19	; 0x13
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	ca 01       	movw	r24, r20
    194a:	88 0f       	add	r24, r24
    194c:	99 1f       	adc	r25, r25
    194e:	88 0f       	add	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	82 0f       	add	r24, r18
    1954:	93 1f       	adc	r25, r19
    1956:	fc 01       	movw	r30, r24
    1958:	e8 59       	subi	r30, 0x98	; 152
    195a:	ff 4f       	sbci	r31, 0xFF	; 255
    195c:	80 81       	ld	r24, Z
    195e:	8c 8b       	std	Y+20, r24	; 0x14
				exitflag=1;
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	8f 87       	std	Y+15, r24	; 0x0f
				if(exitflag==1){
    1964:	8f 85       	ldd	r24, Y+15	; 0x0f
    1966:	81 30       	cpi	r24, 0x01	; 1
    1968:	39 f0       	breq	.+14     	; 0x1978 <KPD_GetKey+0x17e>
	for(i=0;i<4;i++){
		for(k=COLUMN_START;k<=COLUMN_END;k++){
			DIO_SetPinValue(KPD_PORT,k,PIN_HIGH);
		}
		DIO_SetPinValue(KPD_PORT,(COLUMN_START+i),PIN_LOW);
		for(j=0;j<4;j++){
    196a:	8a 89       	ldd	r24, Y+18	; 0x12
    196c:	8f 5f       	subi	r24, 0xFF	; 255
    196e:	8a 8b       	std	Y+18, r24	; 0x12
    1970:	8a 89       	ldd	r24, Y+18	; 0x12
    1972:	84 30       	cpi	r24, 0x04	; 4
    1974:	08 f4       	brcc	.+2      	; 0x1978 <KPD_GetKey+0x17e>
    1976:	68 cf       	rjmp	.-304    	; 0x1848 <KPD_GetKey+0x4e>
					break;
				}
			}

		}
		if(exitflag==1){
    1978:	8f 85       	ldd	r24, Y+15	; 0x0f
    197a:	81 30       	cpi	r24, 0x01	; 1
    197c:	39 f0       	breq	.+14     	; 0x198c <KPD_GetKey+0x192>
	u8 KEY=0xff;
	u8 i,j,k;
	u8 result;
	u8 exitflag=0;

	for(i=0;i<4;i++){
    197e:	8b 89       	ldd	r24, Y+19	; 0x13
    1980:	8f 5f       	subi	r24, 0xFF	; 255
    1982:	8b 8b       	std	Y+19, r24	; 0x13
    1984:	8b 89       	ldd	r24, Y+19	; 0x13
    1986:	84 30       	cpi	r24, 0x04	; 4
    1988:	08 f4       	brcc	.+2      	; 0x198c <KPD_GetKey+0x192>
    198a:	46 cf       	rjmp	.-372    	; 0x1818 <KPD_GetKey+0x1e>
		}
		if(exitflag==1){
			break;
		}
	}
	return KEY;
    198c:	8c 89       	ldd	r24, Y+20	; 0x14
}
    198e:	64 96       	adiw	r28, 0x14	; 20
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	cf 91       	pop	r28
    199c:	df 91       	pop	r29
    199e:	08 95       	ret

000019a0 <LCD_vidInit>:
#include "DIO_interface.h"
#include "LCD_interface.h"
#include "util/delay.h"
#define F_CPU 8000000

void LCD_vidInit(void){
    19a0:	0f 93       	push	r16
    19a2:	1f 93       	push	r17
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	c4 55       	subi	r28, 0x54	; 84
    19ae:	d0 40       	sbci	r29, 0x00	; 0
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	f8 94       	cli
    19b4:	de bf       	out	0x3e, r29	; 62
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPortDirection(lcd_DATAPORT,PORT_OUTPUT);
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	6f ef       	ldi	r22, 0xFF	; 255
    19be:	0e 94 7d 06 	call	0xcfa	; 0xcfa <DIO_SetPortDirection>

	DIO_SetPinDirection(lcd_CONTROLPORT,lcd_RSPIN,PIN_OUTPUT);
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	60 e0       	ldi	r22, 0x00	; 0
    19c6:	41 e0       	ldi	r20, 0x01	; 1
    19c8:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_SetPinDirection>
	DIO_SetPinDirection(lcd_CONTROLPORT,lcd_RWPIN,PIN_OUTPUT);
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	61 e0       	ldi	r22, 0x01	; 1
    19d0:	41 e0       	ldi	r20, 0x01	; 1
    19d2:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_SetPinDirection>
	DIO_SetPinDirection(lcd_CONTROLPORT,lcd_EPIN,PIN_OUTPUT);
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	62 e0       	ldi	r22, 0x02	; 2
    19da:	41 e0       	ldi	r20, 0x01	; 1
    19dc:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_SetPinDirection>

	DIO_SetPinValue(lcd_CONTROLPORT,lcd_EPIN,PIN_LOW);
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	62 e0       	ldi	r22, 0x02	; 2
    19e4:	40 e0       	ldi	r20, 0x00	; 0
    19e6:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>
    19ea:	fe 01       	movw	r30, r28
    19ec:	ef 5a       	subi	r30, 0xAF	; 175
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	a0 ef       	ldi	r26, 0xF0	; 240
    19f6:	b1 e4       	ldi	r27, 0x41	; 65
    19f8:	80 83       	st	Z, r24
    19fa:	91 83       	std	Z+1, r25	; 0x01
    19fc:	a2 83       	std	Z+2, r26	; 0x02
    19fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a00:	8e 01       	movw	r16, r28
    1a02:	03 5b       	subi	r16, 0xB3	; 179
    1a04:	1f 4f       	sbci	r17, 0xFF	; 255
    1a06:	fe 01       	movw	r30, r28
    1a08:	ef 5a       	subi	r30, 0xAF	; 175
    1a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0c:	60 81       	ld	r22, Z
    1a0e:	71 81       	ldd	r23, Z+1	; 0x01
    1a10:	82 81       	ldd	r24, Z+2	; 0x02
    1a12:	93 81       	ldd	r25, Z+3	; 0x03
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	4a ef       	ldi	r20, 0xFA	; 250
    1a1a:	54 e4       	ldi	r21, 0x44	; 68
    1a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	f8 01       	movw	r30, r16
    1a26:	80 83       	st	Z, r24
    1a28:	91 83       	std	Z+1, r25	; 0x01
    1a2a:	a2 83       	std	Z+2, r26	; 0x02
    1a2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a2e:	fe 01       	movw	r30, r28
    1a30:	e3 5b       	subi	r30, 0xB3	; 179
    1a32:	ff 4f       	sbci	r31, 0xFF	; 255
    1a34:	60 81       	ld	r22, Z
    1a36:	71 81       	ldd	r23, Z+1	; 0x01
    1a38:	82 81       	ldd	r24, Z+2	; 0x02
    1a3a:	93 81       	ldd	r25, Z+3	; 0x03
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	40 e8       	ldi	r20, 0x80	; 128
    1a42:	5f e3       	ldi	r21, 0x3F	; 63
    1a44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a48:	88 23       	and	r24, r24
    1a4a:	44 f4       	brge	.+16     	; 0x1a5c <LCD_vidInit+0xbc>
		__ticks = 1;
    1a4c:	fe 01       	movw	r30, r28
    1a4e:	e5 5b       	subi	r30, 0xB5	; 181
    1a50:	ff 4f       	sbci	r31, 0xFF	; 255
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	91 83       	std	Z+1, r25	; 0x01
    1a58:	80 83       	st	Z, r24
    1a5a:	64 c0       	rjmp	.+200    	; 0x1b24 <LCD_vidInit+0x184>
	else if (__tmp > 65535)
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	e3 5b       	subi	r30, 0xB3	; 179
    1a60:	ff 4f       	sbci	r31, 0xFF	; 255
    1a62:	60 81       	ld	r22, Z
    1a64:	71 81       	ldd	r23, Z+1	; 0x01
    1a66:	82 81       	ldd	r24, Z+2	; 0x02
    1a68:	93 81       	ldd	r25, Z+3	; 0x03
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	3f ef       	ldi	r19, 0xFF	; 255
    1a6e:	4f e7       	ldi	r20, 0x7F	; 127
    1a70:	57 e4       	ldi	r21, 0x47	; 71
    1a72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a76:	18 16       	cp	r1, r24
    1a78:	0c f0       	brlt	.+2      	; 0x1a7c <LCD_vidInit+0xdc>
    1a7a:	43 c0       	rjmp	.+134    	; 0x1b02 <LCD_vidInit+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	ef 5a       	subi	r30, 0xAF	; 175
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	60 81       	ld	r22, Z
    1a84:	71 81       	ldd	r23, Z+1	; 0x01
    1a86:	82 81       	ldd	r24, Z+2	; 0x02
    1a88:	93 81       	ldd	r25, Z+3	; 0x03
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	40 e2       	ldi	r20, 0x20	; 32
    1a90:	51 e4       	ldi	r21, 0x41	; 65
    1a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	8e 01       	movw	r16, r28
    1a9c:	05 5b       	subi	r16, 0xB5	; 181
    1a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa0:	bc 01       	movw	r22, r24
    1aa2:	cd 01       	movw	r24, r26
    1aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	f8 01       	movw	r30, r16
    1aae:	91 83       	std	Z+1, r25	; 0x01
    1ab0:	80 83       	st	Z, r24
    1ab2:	1f c0       	rjmp	.+62     	; 0x1af2 <LCD_vidInit+0x152>
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	e7 5b       	subi	r30, 0xB7	; 183
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	88 ec       	ldi	r24, 0xC8	; 200
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	91 83       	std	Z+1, r25	; 0x01
    1ac0:	80 83       	st	Z, r24
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	e7 5b       	subi	r30, 0xB7	; 183
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	80 81       	ld	r24, Z
    1aca:	91 81       	ldd	r25, Z+1	; 0x01
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <LCD_vidInit+0x12c>
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	e7 5b       	subi	r30, 0xB7	; 183
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	91 83       	std	Z+1, r25	; 0x01
    1ad8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ada:	de 01       	movw	r26, r28
    1adc:	a5 5b       	subi	r26, 0xB5	; 181
    1ade:	bf 4f       	sbci	r27, 0xFF	; 255
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	e5 5b       	subi	r30, 0xB5	; 181
    1ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae6:	80 81       	ld	r24, Z
    1ae8:	91 81       	ldd	r25, Z+1	; 0x01
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	11 96       	adiw	r26, 0x01	; 1
    1aee:	9c 93       	st	X, r25
    1af0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af2:	fe 01       	movw	r30, r28
    1af4:	e5 5b       	subi	r30, 0xB5	; 181
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	80 81       	ld	r24, Z
    1afa:	91 81       	ldd	r25, Z+1	; 0x01
    1afc:	00 97       	sbiw	r24, 0x00	; 0
    1afe:	d1 f6       	brne	.-76     	; 0x1ab4 <LCD_vidInit+0x114>
    1b00:	27 c0       	rjmp	.+78     	; 0x1b50 <LCD_vidInit+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b02:	8e 01       	movw	r16, r28
    1b04:	05 5b       	subi	r16, 0xB5	; 181
    1b06:	1f 4f       	sbci	r17, 0xFF	; 255
    1b08:	fe 01       	movw	r30, r28
    1b0a:	e3 5b       	subi	r30, 0xB3	; 179
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	60 81       	ld	r22, Z
    1b10:	71 81       	ldd	r23, Z+1	; 0x01
    1b12:	82 81       	ldd	r24, Z+2	; 0x02
    1b14:	93 81       	ldd	r25, Z+3	; 0x03
    1b16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	f8 01       	movw	r30, r16
    1b20:	91 83       	std	Z+1, r25	; 0x01
    1b22:	80 83       	st	Z, r24
    1b24:	de 01       	movw	r26, r28
    1b26:	a9 5b       	subi	r26, 0xB9	; 185
    1b28:	bf 4f       	sbci	r27, 0xFF	; 255
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	e5 5b       	subi	r30, 0xB5	; 181
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	80 81       	ld	r24, Z
    1b32:	91 81       	ldd	r25, Z+1	; 0x01
    1b34:	8d 93       	st	X+, r24
    1b36:	9c 93       	st	X, r25
    1b38:	fe 01       	movw	r30, r28
    1b3a:	e9 5b       	subi	r30, 0xB9	; 185
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	80 81       	ld	r24, Z
    1b40:	91 81       	ldd	r25, Z+1	; 0x01
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <LCD_vidInit+0x1a2>
    1b46:	fe 01       	movw	r30, r28
    1b48:	e9 5b       	subi	r30, 0xB9	; 185
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	91 83       	std	Z+1, r25	; 0x01
    1b4e:	80 83       	st	Z, r24

	_delay_ms(30);

	LCD_vidSendCommand(lcd_Home);
    1b50:	82 e0       	ldi	r24, 0x02	; 2
    1b52:	0e 94 10 10 	call	0x2020	; 0x2020 <LCD_vidSendCommand>
    1b56:	fe 01       	movw	r30, r28
    1b58:	ed 5b       	subi	r30, 0xBD	; 189
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	a0 ea       	ldi	r26, 0xA0	; 160
    1b62:	b0 e4       	ldi	r27, 0x40	; 64
    1b64:	80 83       	st	Z, r24
    1b66:	91 83       	std	Z+1, r25	; 0x01
    1b68:	a2 83       	std	Z+2, r26	; 0x02
    1b6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b6c:	8e 01       	movw	r16, r28
    1b6e:	01 5c       	subi	r16, 0xC1	; 193
    1b70:	1f 4f       	sbci	r17, 0xFF	; 255
    1b72:	fe 01       	movw	r30, r28
    1b74:	ed 5b       	subi	r30, 0xBD	; 189
    1b76:	ff 4f       	sbci	r31, 0xFF	; 255
    1b78:	60 81       	ld	r22, Z
    1b7a:	71 81       	ldd	r23, Z+1	; 0x01
    1b7c:	82 81       	ldd	r24, Z+2	; 0x02
    1b7e:	93 81       	ldd	r25, Z+3	; 0x03
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	4a ef       	ldi	r20, 0xFA	; 250
    1b86:	54 e4       	ldi	r21, 0x44	; 68
    1b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	f8 01       	movw	r30, r16
    1b92:	80 83       	st	Z, r24
    1b94:	91 83       	std	Z+1, r25	; 0x01
    1b96:	a2 83       	std	Z+2, r26	; 0x02
    1b98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	ff 96       	adiw	r30, 0x3f	; 63
    1b9e:	60 81       	ld	r22, Z
    1ba0:	71 81       	ldd	r23, Z+1	; 0x01
    1ba2:	82 81       	ldd	r24, Z+2	; 0x02
    1ba4:	93 81       	ldd	r25, Z+3	; 0x03
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	40 e8       	ldi	r20, 0x80	; 128
    1bac:	5f e3       	ldi	r21, 0x3F	; 63
    1bae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bb2:	88 23       	and	r24, r24
    1bb4:	2c f4       	brge	.+10     	; 0x1bc0 <LCD_vidInit+0x220>
		__ticks = 1;
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	9e af       	std	Y+62, r25	; 0x3e
    1bbc:	8d af       	std	Y+61, r24	; 0x3d
    1bbe:	46 c0       	rjmp	.+140    	; 0x1c4c <LCD_vidInit+0x2ac>
	else if (__tmp > 65535)
    1bc0:	fe 01       	movw	r30, r28
    1bc2:	ff 96       	adiw	r30, 0x3f	; 63
    1bc4:	60 81       	ld	r22, Z
    1bc6:	71 81       	ldd	r23, Z+1	; 0x01
    1bc8:	82 81       	ldd	r24, Z+2	; 0x02
    1bca:	93 81       	ldd	r25, Z+3	; 0x03
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	3f ef       	ldi	r19, 0xFF	; 255
    1bd0:	4f e7       	ldi	r20, 0x7F	; 127
    1bd2:	57 e4       	ldi	r21, 0x47	; 71
    1bd4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bd8:	18 16       	cp	r1, r24
    1bda:	64 f5       	brge	.+88     	; 0x1c34 <LCD_vidInit+0x294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bdc:	fe 01       	movw	r30, r28
    1bde:	ed 5b       	subi	r30, 0xBD	; 189
    1be0:	ff 4f       	sbci	r31, 0xFF	; 255
    1be2:	60 81       	ld	r22, Z
    1be4:	71 81       	ldd	r23, Z+1	; 0x01
    1be6:	82 81       	ldd	r24, Z+2	; 0x02
    1be8:	93 81       	ldd	r25, Z+3	; 0x03
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	40 e2       	ldi	r20, 0x20	; 32
    1bf0:	51 e4       	ldi	r21, 0x41	; 65
    1bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	bc 01       	movw	r22, r24
    1bfc:	cd 01       	movw	r24, r26
    1bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	9e af       	std	Y+62, r25	; 0x3e
    1c08:	8d af       	std	Y+61, r24	; 0x3d
    1c0a:	0f c0       	rjmp	.+30     	; 0x1c2a <LCD_vidInit+0x28a>
    1c0c:	88 ec       	ldi	r24, 0xC8	; 200
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	9c af       	std	Y+60, r25	; 0x3c
    1c12:	8b af       	std	Y+59, r24	; 0x3b
    1c14:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c16:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	f1 f7       	brne	.-4      	; 0x1c18 <LCD_vidInit+0x278>
    1c1c:	9c af       	std	Y+60, r25	; 0x3c
    1c1e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c20:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c22:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	9e af       	std	Y+62, r25	; 0x3e
    1c28:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c2e:	00 97       	sbiw	r24, 0x00	; 0
    1c30:	69 f7       	brne	.-38     	; 0x1c0c <LCD_vidInit+0x26c>
    1c32:	16 c0       	rjmp	.+44     	; 0x1c60 <LCD_vidInit+0x2c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c34:	fe 01       	movw	r30, r28
    1c36:	ff 96       	adiw	r30, 0x3f	; 63
    1c38:	60 81       	ld	r22, Z
    1c3a:	71 81       	ldd	r23, Z+1	; 0x01
    1c3c:	82 81       	ldd	r24, Z+2	; 0x02
    1c3e:	93 81       	ldd	r25, Z+3	; 0x03
    1c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	9e af       	std	Y+62, r25	; 0x3e
    1c4a:	8d af       	std	Y+61, r24	; 0x3d
    1c4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c4e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c50:	9a af       	std	Y+58, r25	; 0x3a
    1c52:	89 af       	std	Y+57, r24	; 0x39
    1c54:	89 ad       	ldd	r24, Y+57	; 0x39
    1c56:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	f1 f7       	brne	.-4      	; 0x1c58 <LCD_vidInit+0x2b8>
    1c5c:	9a af       	std	Y+58, r25	; 0x3a
    1c5e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);

	LCD_vidSendCommand(lcd_FunctionSet8bit);
    1c60:	88 e3       	ldi	r24, 0x38	; 56
    1c62:	0e 94 10 10 	call	0x2020	; 0x2020 <LCD_vidSendCommand>
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	a0 ea       	ldi	r26, 0xA0	; 160
    1c6c:	b0 e4       	ldi	r27, 0x40	; 64
    1c6e:	8d ab       	std	Y+53, r24	; 0x35
    1c70:	9e ab       	std	Y+54, r25	; 0x36
    1c72:	af ab       	std	Y+55, r26	; 0x37
    1c74:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c76:	6d a9       	ldd	r22, Y+53	; 0x35
    1c78:	7e a9       	ldd	r23, Y+54	; 0x36
    1c7a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c7c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	4a ef       	ldi	r20, 0xFA	; 250
    1c84:	54 e4       	ldi	r21, 0x44	; 68
    1c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	89 ab       	std	Y+49, r24	; 0x31
    1c90:	9a ab       	std	Y+50, r25	; 0x32
    1c92:	ab ab       	std	Y+51, r26	; 0x33
    1c94:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c96:	69 a9       	ldd	r22, Y+49	; 0x31
    1c98:	7a a9       	ldd	r23, Y+50	; 0x32
    1c9a:	8b a9       	ldd	r24, Y+51	; 0x33
    1c9c:	9c a9       	ldd	r25, Y+52	; 0x34
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	40 e8       	ldi	r20, 0x80	; 128
    1ca4:	5f e3       	ldi	r21, 0x3F	; 63
    1ca6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1caa:	88 23       	and	r24, r24
    1cac:	2c f4       	brge	.+10     	; 0x1cb8 <LCD_vidInit+0x318>
		__ticks = 1;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	98 ab       	std	Y+48, r25	; 0x30
    1cb4:	8f a7       	std	Y+47, r24	; 0x2f
    1cb6:	3f c0       	rjmp	.+126    	; 0x1d36 <LCD_vidInit+0x396>
	else if (__tmp > 65535)
    1cb8:	69 a9       	ldd	r22, Y+49	; 0x31
    1cba:	7a a9       	ldd	r23, Y+50	; 0x32
    1cbc:	8b a9       	ldd	r24, Y+51	; 0x33
    1cbe:	9c a9       	ldd	r25, Y+52	; 0x34
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	3f ef       	ldi	r19, 0xFF	; 255
    1cc4:	4f e7       	ldi	r20, 0x7F	; 127
    1cc6:	57 e4       	ldi	r21, 0x47	; 71
    1cc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ccc:	18 16       	cp	r1, r24
    1cce:	4c f5       	brge	.+82     	; 0x1d22 <LCD_vidInit+0x382>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd0:	6d a9       	ldd	r22, Y+53	; 0x35
    1cd2:	7e a9       	ldd	r23, Y+54	; 0x36
    1cd4:	8f a9       	ldd	r24, Y+55	; 0x37
    1cd6:	98 ad       	ldd	r25, Y+56	; 0x38
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e2       	ldi	r20, 0x20	; 32
    1cde:	51 e4       	ldi	r21, 0x41	; 65
    1ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	bc 01       	movw	r22, r24
    1cea:	cd 01       	movw	r24, r26
    1cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	98 ab       	std	Y+48, r25	; 0x30
    1cf6:	8f a7       	std	Y+47, r24	; 0x2f
    1cf8:	0f c0       	rjmp	.+30     	; 0x1d18 <LCD_vidInit+0x378>
    1cfa:	88 ec       	ldi	r24, 0xC8	; 200
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	9e a7       	std	Y+46, r25	; 0x2e
    1d00:	8d a7       	std	Y+45, r24	; 0x2d
    1d02:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d04:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <LCD_vidInit+0x366>
    1d0a:	9e a7       	std	Y+46, r25	; 0x2e
    1d0c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d10:	98 a9       	ldd	r25, Y+48	; 0x30
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	98 ab       	std	Y+48, r25	; 0x30
    1d16:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d1c:	00 97       	sbiw	r24, 0x00	; 0
    1d1e:	69 f7       	brne	.-38     	; 0x1cfa <LCD_vidInit+0x35a>
    1d20:	14 c0       	rjmp	.+40     	; 0x1d4a <LCD_vidInit+0x3aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d22:	69 a9       	ldd	r22, Y+49	; 0x31
    1d24:	7a a9       	ldd	r23, Y+50	; 0x32
    1d26:	8b a9       	ldd	r24, Y+51	; 0x33
    1d28:	9c a9       	ldd	r25, Y+52	; 0x34
    1d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	98 ab       	std	Y+48, r25	; 0x30
    1d34:	8f a7       	std	Y+47, r24	; 0x2f
    1d36:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d38:	98 a9       	ldd	r25, Y+48	; 0x30
    1d3a:	9c a7       	std	Y+44, r25	; 0x2c
    1d3c:	8b a7       	std	Y+43, r24	; 0x2b
    1d3e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d40:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	f1 f7       	brne	.-4      	; 0x1d42 <LCD_vidInit+0x3a2>
    1d46:	9c a7       	std	Y+44, r25	; 0x2c
    1d48:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);

	LCD_vidSendCommand(lcd_DisplayOn);
    1d4a:	8c e0       	ldi	r24, 0x0C	; 12
    1d4c:	0e 94 10 10 	call	0x2020	; 0x2020 <LCD_vidSendCommand>
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	a0 ea       	ldi	r26, 0xA0	; 160
    1d56:	b0 e4       	ldi	r27, 0x40	; 64
    1d58:	8f a3       	std	Y+39, r24	; 0x27
    1d5a:	98 a7       	std	Y+40, r25	; 0x28
    1d5c:	a9 a7       	std	Y+41, r26	; 0x29
    1d5e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d60:	6f a1       	ldd	r22, Y+39	; 0x27
    1d62:	78 a5       	ldd	r23, Y+40	; 0x28
    1d64:	89 a5       	ldd	r24, Y+41	; 0x29
    1d66:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	4a ef       	ldi	r20, 0xFA	; 250
    1d6e:	54 e4       	ldi	r21, 0x44	; 68
    1d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	8b a3       	std	Y+35, r24	; 0x23
    1d7a:	9c a3       	std	Y+36, r25	; 0x24
    1d7c:	ad a3       	std	Y+37, r26	; 0x25
    1d7e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d80:	6b a1       	ldd	r22, Y+35	; 0x23
    1d82:	7c a1       	ldd	r23, Y+36	; 0x24
    1d84:	8d a1       	ldd	r24, Y+37	; 0x25
    1d86:	9e a1       	ldd	r25, Y+38	; 0x26
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	40 e8       	ldi	r20, 0x80	; 128
    1d8e:	5f e3       	ldi	r21, 0x3F	; 63
    1d90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d94:	88 23       	and	r24, r24
    1d96:	2c f4       	brge	.+10     	; 0x1da2 <LCD_vidInit+0x402>
		__ticks = 1;
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	9a a3       	std	Y+34, r25	; 0x22
    1d9e:	89 a3       	std	Y+33, r24	; 0x21
    1da0:	3f c0       	rjmp	.+126    	; 0x1e20 <LCD_vidInit+0x480>
	else if (__tmp > 65535)
    1da2:	6b a1       	ldd	r22, Y+35	; 0x23
    1da4:	7c a1       	ldd	r23, Y+36	; 0x24
    1da6:	8d a1       	ldd	r24, Y+37	; 0x25
    1da8:	9e a1       	ldd	r25, Y+38	; 0x26
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	3f ef       	ldi	r19, 0xFF	; 255
    1dae:	4f e7       	ldi	r20, 0x7F	; 127
    1db0:	57 e4       	ldi	r21, 0x47	; 71
    1db2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1db6:	18 16       	cp	r1, r24
    1db8:	4c f5       	brge	.+82     	; 0x1e0c <LCD_vidInit+0x46c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dba:	6f a1       	ldd	r22, Y+39	; 0x27
    1dbc:	78 a5       	ldd	r23, Y+40	; 0x28
    1dbe:	89 a5       	ldd	r24, Y+41	; 0x29
    1dc0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	40 e2       	ldi	r20, 0x20	; 32
    1dc8:	51 e4       	ldi	r21, 0x41	; 65
    1dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	bc 01       	movw	r22, r24
    1dd4:	cd 01       	movw	r24, r26
    1dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	9a a3       	std	Y+34, r25	; 0x22
    1de0:	89 a3       	std	Y+33, r24	; 0x21
    1de2:	0f c0       	rjmp	.+30     	; 0x1e02 <LCD_vidInit+0x462>
    1de4:	88 ec       	ldi	r24, 0xC8	; 200
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	98 a3       	std	Y+32, r25	; 0x20
    1dea:	8f 8f       	std	Y+31, r24	; 0x1f
    1dec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dee:	98 a1       	ldd	r25, Y+32	; 0x20
    1df0:	01 97       	sbiw	r24, 0x01	; 1
    1df2:	f1 f7       	brne	.-4      	; 0x1df0 <LCD_vidInit+0x450>
    1df4:	98 a3       	std	Y+32, r25	; 0x20
    1df6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df8:	89 a1       	ldd	r24, Y+33	; 0x21
    1dfa:	9a a1       	ldd	r25, Y+34	; 0x22
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	9a a3       	std	Y+34, r25	; 0x22
    1e00:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e02:	89 a1       	ldd	r24, Y+33	; 0x21
    1e04:	9a a1       	ldd	r25, Y+34	; 0x22
    1e06:	00 97       	sbiw	r24, 0x00	; 0
    1e08:	69 f7       	brne	.-38     	; 0x1de4 <LCD_vidInit+0x444>
    1e0a:	14 c0       	rjmp	.+40     	; 0x1e34 <LCD_vidInit+0x494>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e0c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e0e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e10:	8d a1       	ldd	r24, Y+37	; 0x25
    1e12:	9e a1       	ldd	r25, Y+38	; 0x26
    1e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	9a a3       	std	Y+34, r25	; 0x22
    1e1e:	89 a3       	std	Y+33, r24	; 0x21
    1e20:	89 a1       	ldd	r24, Y+33	; 0x21
    1e22:	9a a1       	ldd	r25, Y+34	; 0x22
    1e24:	9e 8f       	std	Y+30, r25	; 0x1e
    1e26:	8d 8f       	std	Y+29, r24	; 0x1d
    1e28:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e2a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	f1 f7       	brne	.-4      	; 0x1e2c <LCD_vidInit+0x48c>
    1e30:	9e 8f       	std	Y+30, r25	; 0x1e
    1e32:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	LCD_vidSendCommand(lcd_Clear);
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	0e 94 10 10 	call	0x2020	; 0x2020 <LCD_vidSendCommand>
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	a0 ea       	ldi	r26, 0xA0	; 160
    1e40:	b0 e4       	ldi	r27, 0x40	; 64
    1e42:	89 8f       	std	Y+25, r24	; 0x19
    1e44:	9a 8f       	std	Y+26, r25	; 0x1a
    1e46:	ab 8f       	std	Y+27, r26	; 0x1b
    1e48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e4a:	69 8d       	ldd	r22, Y+25	; 0x19
    1e4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	4a ef       	ldi	r20, 0xFA	; 250
    1e58:	54 e4       	ldi	r21, 0x44	; 68
    1e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	8d 8b       	std	Y+21, r24	; 0x15
    1e64:	9e 8b       	std	Y+22, r25	; 0x16
    1e66:	af 8b       	std	Y+23, r26	; 0x17
    1e68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e70:	98 8d       	ldd	r25, Y+24	; 0x18
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	40 e8       	ldi	r20, 0x80	; 128
    1e78:	5f e3       	ldi	r21, 0x3F	; 63
    1e7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e7e:	88 23       	and	r24, r24
    1e80:	2c f4       	brge	.+10     	; 0x1e8c <LCD_vidInit+0x4ec>
		__ticks = 1;
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	9c 8b       	std	Y+20, r25	; 0x14
    1e88:	8b 8b       	std	Y+19, r24	; 0x13
    1e8a:	3f c0       	rjmp	.+126    	; 0x1f0a <LCD_vidInit+0x56a>
	else if (__tmp > 65535)
    1e8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e90:	8f 89       	ldd	r24, Y+23	; 0x17
    1e92:	98 8d       	ldd	r25, Y+24	; 0x18
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	3f ef       	ldi	r19, 0xFF	; 255
    1e98:	4f e7       	ldi	r20, 0x7F	; 127
    1e9a:	57 e4       	ldi	r21, 0x47	; 71
    1e9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ea0:	18 16       	cp	r1, r24
    1ea2:	4c f5       	brge	.+82     	; 0x1ef6 <LCD_vidInit+0x556>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ea6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ea8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eaa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	40 e2       	ldi	r20, 0x20	; 32
    1eb2:	51 e4       	ldi	r21, 0x41	; 65
    1eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	bc 01       	movw	r22, r24
    1ebe:	cd 01       	movw	r24, r26
    1ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	9c 8b       	std	Y+20, r25	; 0x14
    1eca:	8b 8b       	std	Y+19, r24	; 0x13
    1ecc:	0f c0       	rjmp	.+30     	; 0x1eec <LCD_vidInit+0x54c>
    1ece:	88 ec       	ldi	r24, 0xC8	; 200
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	9a 8b       	std	Y+18, r25	; 0x12
    1ed4:	89 8b       	std	Y+17, r24	; 0x11
    1ed6:	89 89       	ldd	r24, Y+17	; 0x11
    1ed8:	9a 89       	ldd	r25, Y+18	; 0x12
    1eda:	01 97       	sbiw	r24, 0x01	; 1
    1edc:	f1 f7       	brne	.-4      	; 0x1eda <LCD_vidInit+0x53a>
    1ede:	9a 8b       	std	Y+18, r25	; 0x12
    1ee0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ee4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	9c 8b       	std	Y+20, r25	; 0x14
    1eea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eec:	8b 89       	ldd	r24, Y+19	; 0x13
    1eee:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef0:	00 97       	sbiw	r24, 0x00	; 0
    1ef2:	69 f7       	brne	.-38     	; 0x1ece <LCD_vidInit+0x52e>
    1ef4:	14 c0       	rjmp	.+40     	; 0x1f1e <LCD_vidInit+0x57e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ef8:	7e 89       	ldd	r23, Y+22	; 0x16
    1efa:	8f 89       	ldd	r24, Y+23	; 0x17
    1efc:	98 8d       	ldd	r25, Y+24	; 0x18
    1efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	9c 8b       	std	Y+20, r25	; 0x14
    1f08:	8b 8b       	std	Y+19, r24	; 0x13
    1f0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f0e:	98 8b       	std	Y+16, r25	; 0x10
    1f10:	8f 87       	std	Y+15, r24	; 0x0f
    1f12:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f14:	98 89       	ldd	r25, Y+16	; 0x10
    1f16:	01 97       	sbiw	r24, 0x01	; 1
    1f18:	f1 f7       	brne	.-4      	; 0x1f16 <LCD_vidInit+0x576>
    1f1a:	98 8b       	std	Y+16, r25	; 0x10
    1f1c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);

	LCD_vidSendCommand(lcd_EntryMode);
    1f1e:	86 e0       	ldi	r24, 0x06	; 6
    1f20:	0e 94 10 10 	call	0x2020	; 0x2020 <LCD_vidSendCommand>
    1f24:	80 e0       	ldi	r24, 0x00	; 0
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	a0 ea       	ldi	r26, 0xA0	; 160
    1f2a:	b0 e4       	ldi	r27, 0x40	; 64
    1f2c:	8b 87       	std	Y+11, r24	; 0x0b
    1f2e:	9c 87       	std	Y+12, r25	; 0x0c
    1f30:	ad 87       	std	Y+13, r26	; 0x0d
    1f32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	4a ef       	ldi	r20, 0xFA	; 250
    1f42:	54 e4       	ldi	r21, 0x44	; 68
    1f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	8f 83       	std	Y+7, r24	; 0x07
    1f4e:	98 87       	std	Y+8, r25	; 0x08
    1f50:	a9 87       	std	Y+9, r26	; 0x09
    1f52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f54:	6f 81       	ldd	r22, Y+7	; 0x07
    1f56:	78 85       	ldd	r23, Y+8	; 0x08
    1f58:	89 85       	ldd	r24, Y+9	; 0x09
    1f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	40 e8       	ldi	r20, 0x80	; 128
    1f62:	5f e3       	ldi	r21, 0x3F	; 63
    1f64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f68:	88 23       	and	r24, r24
    1f6a:	2c f4       	brge	.+10     	; 0x1f76 <LCD_vidInit+0x5d6>
		__ticks = 1;
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	9e 83       	std	Y+6, r25	; 0x06
    1f72:	8d 83       	std	Y+5, r24	; 0x05
    1f74:	3f c0       	rjmp	.+126    	; 0x1ff4 <LCD_vidInit+0x654>
	else if (__tmp > 65535)
    1f76:	6f 81       	ldd	r22, Y+7	; 0x07
    1f78:	78 85       	ldd	r23, Y+8	; 0x08
    1f7a:	89 85       	ldd	r24, Y+9	; 0x09
    1f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	3f ef       	ldi	r19, 0xFF	; 255
    1f82:	4f e7       	ldi	r20, 0x7F	; 127
    1f84:	57 e4       	ldi	r21, 0x47	; 71
    1f86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f8a:	18 16       	cp	r1, r24
    1f8c:	4c f5       	brge	.+82     	; 0x1fe0 <LCD_vidInit+0x640>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	40 e2       	ldi	r20, 0x20	; 32
    1f9c:	51 e4       	ldi	r21, 0x41	; 65
    1f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	bc 01       	movw	r22, r24
    1fa8:	cd 01       	movw	r24, r26
    1faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	9e 83       	std	Y+6, r25	; 0x06
    1fb4:	8d 83       	std	Y+5, r24	; 0x05
    1fb6:	0f c0       	rjmp	.+30     	; 0x1fd6 <LCD_vidInit+0x636>
    1fb8:	88 ec       	ldi	r24, 0xC8	; 200
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	9c 83       	std	Y+4, r25	; 0x04
    1fbe:	8b 83       	std	Y+3, r24	; 0x03
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc4:	01 97       	sbiw	r24, 0x01	; 1
    1fc6:	f1 f7       	brne	.-4      	; 0x1fc4 <LCD_vidInit+0x624>
    1fc8:	9c 83       	std	Y+4, r25	; 0x04
    1fca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fce:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	9e 83       	std	Y+6, r25	; 0x06
    1fd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fda:	00 97       	sbiw	r24, 0x00	; 0
    1fdc:	69 f7       	brne	.-38     	; 0x1fb8 <LCD_vidInit+0x618>
    1fde:	14 c0       	rjmp	.+40     	; 0x2008 <LCD_vidInit+0x668>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe2:	78 85       	ldd	r23, Y+8	; 0x08
    1fe4:	89 85       	ldd	r24, Y+9	; 0x09
    1fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	9e 83       	std	Y+6, r25	; 0x06
    1ff2:	8d 83       	std	Y+5, r24	; 0x05
    1ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff8:	9a 83       	std	Y+2, r25	; 0x02
    1ffa:	89 83       	std	Y+1, r24	; 0x01
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	f1 f7       	brne	.-4      	; 0x2000 <LCD_vidInit+0x660>
    2004:	9a 83       	std	Y+2, r25	; 0x02
    2006:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);


}
    2008:	cc 5a       	subi	r28, 0xAC	; 172
    200a:	df 4f       	sbci	r29, 0xFF	; 255
    200c:	0f b6       	in	r0, 0x3f	; 63
    200e:	f8 94       	cli
    2010:	de bf       	out	0x3e, r29	; 62
    2012:	0f be       	out	0x3f, r0	; 63
    2014:	cd bf       	out	0x3d, r28	; 61
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	1f 91       	pop	r17
    201c:	0f 91       	pop	r16
    201e:	08 95       	ret

00002020 <LCD_vidSendCommand>:
void LCD_vidSendCommand(u8 u8CmdCpy){
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
    2028:	2f 97       	sbiw	r28, 0x0f	; 15
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	f8 94       	cli
    202e:	de bf       	out	0x3e, r29	; 62
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	cd bf       	out	0x3d, r28	; 61
    2034:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_SetPinValue(lcd_CONTROLPORT,lcd_RSPIN,PIN_LOW);
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	60 e0       	ldi	r22, 0x00	; 0
    203a:	40 e0       	ldi	r20, 0x00	; 0
    203c:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>
	DIO_SetPinValue(lcd_CONTROLPORT,lcd_RWPIN,PIN_LOW);
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	61 e0       	ldi	r22, 0x01	; 1
    2044:	40 e0       	ldi	r20, 0x00	; 0
    2046:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>
	DIO_SetPinValue(lcd_CONTROLPORT,lcd_EPIN,PIN_LOW);
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	62 e0       	ldi	r22, 0x02	; 2
    204e:	40 e0       	ldi	r20, 0x00	; 0
    2050:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>
	DIO_SetPortValue(lcd_DATAPORT,u8CmdCpy);
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	6f 85       	ldd	r22, Y+15	; 0x0f
    2058:	0e 94 be 06 	call	0xd7c	; 0xd7c <DIO_SetPortValue>
	DIO_SetPinValue(lcd_CONTROLPORT,lcd_EPIN,PIN_HIGH);
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	62 e0       	ldi	r22, 0x02	; 2
    2060:	41 e0       	ldi	r20, 0x01	; 1
    2062:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	a0 ea       	ldi	r26, 0xA0	; 160
    206c:	b0 e4       	ldi	r27, 0x40	; 64
    206e:	8b 87       	std	Y+11, r24	; 0x0b
    2070:	9c 87       	std	Y+12, r25	; 0x0c
    2072:	ad 87       	std	Y+13, r26	; 0x0d
    2074:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2076:	6b 85       	ldd	r22, Y+11	; 0x0b
    2078:	7c 85       	ldd	r23, Y+12	; 0x0c
    207a:	8d 85       	ldd	r24, Y+13	; 0x0d
    207c:	9e 85       	ldd	r25, Y+14	; 0x0e
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	4a ef       	ldi	r20, 0xFA	; 250
    2084:	54 e4       	ldi	r21, 0x44	; 68
    2086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	8f 83       	std	Y+7, r24	; 0x07
    2090:	98 87       	std	Y+8, r25	; 0x08
    2092:	a9 87       	std	Y+9, r26	; 0x09
    2094:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2096:	6f 81       	ldd	r22, Y+7	; 0x07
    2098:	78 85       	ldd	r23, Y+8	; 0x08
    209a:	89 85       	ldd	r24, Y+9	; 0x09
    209c:	9a 85       	ldd	r25, Y+10	; 0x0a
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	40 e8       	ldi	r20, 0x80	; 128
    20a4:	5f e3       	ldi	r21, 0x3F	; 63
    20a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20aa:	88 23       	and	r24, r24
    20ac:	2c f4       	brge	.+10     	; 0x20b8 <LCD_vidSendCommand+0x98>
		__ticks = 1;
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	9e 83       	std	Y+6, r25	; 0x06
    20b4:	8d 83       	std	Y+5, r24	; 0x05
    20b6:	3f c0       	rjmp	.+126    	; 0x2136 <LCD_vidSendCommand+0x116>
	else if (__tmp > 65535)
    20b8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ba:	78 85       	ldd	r23, Y+8	; 0x08
    20bc:	89 85       	ldd	r24, Y+9	; 0x09
    20be:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	3f ef       	ldi	r19, 0xFF	; 255
    20c4:	4f e7       	ldi	r20, 0x7F	; 127
    20c6:	57 e4       	ldi	r21, 0x47	; 71
    20c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20cc:	18 16       	cp	r1, r24
    20ce:	4c f5       	brge	.+82     	; 0x2122 <LCD_vidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	40 e2       	ldi	r20, 0x20	; 32
    20de:	51 e4       	ldi	r21, 0x41	; 65
    20e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	bc 01       	movw	r22, r24
    20ea:	cd 01       	movw	r24, r26
    20ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	9e 83       	std	Y+6, r25	; 0x06
    20f6:	8d 83       	std	Y+5, r24	; 0x05
    20f8:	0f c0       	rjmp	.+30     	; 0x2118 <LCD_vidSendCommand+0xf8>
    20fa:	88 ec       	ldi	r24, 0xC8	; 200
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	9c 83       	std	Y+4, r25	; 0x04
    2100:	8b 83       	std	Y+3, r24	; 0x03
    2102:	8b 81       	ldd	r24, Y+3	; 0x03
    2104:	9c 81       	ldd	r25, Y+4	; 0x04
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	f1 f7       	brne	.-4      	; 0x2106 <LCD_vidSendCommand+0xe6>
    210a:	9c 83       	std	Y+4, r25	; 0x04
    210c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    210e:	8d 81       	ldd	r24, Y+5	; 0x05
    2110:	9e 81       	ldd	r25, Y+6	; 0x06
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	9e 83       	std	Y+6, r25	; 0x06
    2116:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2118:	8d 81       	ldd	r24, Y+5	; 0x05
    211a:	9e 81       	ldd	r25, Y+6	; 0x06
    211c:	00 97       	sbiw	r24, 0x00	; 0
    211e:	69 f7       	brne	.-38     	; 0x20fa <LCD_vidSendCommand+0xda>
    2120:	14 c0       	rjmp	.+40     	; 0x214a <LCD_vidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2122:	6f 81       	ldd	r22, Y+7	; 0x07
    2124:	78 85       	ldd	r23, Y+8	; 0x08
    2126:	89 85       	ldd	r24, Y+9	; 0x09
    2128:	9a 85       	ldd	r25, Y+10	; 0x0a
    212a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	9e 83       	std	Y+6, r25	; 0x06
    2134:	8d 83       	std	Y+5, r24	; 0x05
    2136:	8d 81       	ldd	r24, Y+5	; 0x05
    2138:	9e 81       	ldd	r25, Y+6	; 0x06
    213a:	9a 83       	std	Y+2, r25	; 0x02
    213c:	89 83       	std	Y+1, r24	; 0x01
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	9a 81       	ldd	r25, Y+2	; 0x02
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	f1 f7       	brne	.-4      	; 0x2142 <LCD_vidSendCommand+0x122>
    2146:	9a 83       	std	Y+2, r25	; 0x02
    2148:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_SetPinValue(lcd_CONTROLPORT,lcd_EPIN,PIN_LOW);
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	62 e0       	ldi	r22, 0x02	; 2
    214e:	40 e0       	ldi	r20, 0x00	; 0
    2150:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>

}
    2154:	2f 96       	adiw	r28, 0x0f	; 15
    2156:	0f b6       	in	r0, 0x3f	; 63
    2158:	f8 94       	cli
    215a:	de bf       	out	0x3e, r29	; 62
    215c:	0f be       	out	0x3f, r0	; 63
    215e:	cd bf       	out	0x3d, r28	; 61
    2160:	cf 91       	pop	r28
    2162:	df 91       	pop	r29
    2164:	08 95       	ret

00002166 <LCD_vidWriteCharctr>:
void LCD_vidWriteCharctr(u8 u8DataCpy){
    2166:	df 93       	push	r29
    2168:	cf 93       	push	r28
    216a:	cd b7       	in	r28, 0x3d	; 61
    216c:	de b7       	in	r29, 0x3e	; 62
    216e:	2f 97       	sbiw	r28, 0x0f	; 15
    2170:	0f b6       	in	r0, 0x3f	; 63
    2172:	f8 94       	cli
    2174:	de bf       	out	0x3e, r29	; 62
    2176:	0f be       	out	0x3f, r0	; 63
    2178:	cd bf       	out	0x3d, r28	; 61
    217a:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_SetPinValue(lcd_CONTROLPORT,lcd_RSPIN,PIN_HIGH);
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	60 e0       	ldi	r22, 0x00	; 0
    2180:	41 e0       	ldi	r20, 0x01	; 1
    2182:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>
	DIO_SetPinValue(lcd_CONTROLPORT,lcd_RWPIN,PIN_LOW);
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	61 e0       	ldi	r22, 0x01	; 1
    218a:	40 e0       	ldi	r20, 0x00	; 0
    218c:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>
	DIO_SetPinValue(lcd_CONTROLPORT,lcd_EPIN,PIN_LOW);
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	62 e0       	ldi	r22, 0x02	; 2
    2194:	40 e0       	ldi	r20, 0x00	; 0
    2196:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>
	DIO_SetPortValue(lcd_DATAPORT,u8DataCpy);
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	6f 85       	ldd	r22, Y+15	; 0x0f
    219e:	0e 94 be 06 	call	0xd7c	; 0xd7c <DIO_SetPortValue>
	DIO_SetPinValue(lcd_CONTROLPORT,lcd_EPIN,PIN_HIGH);
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	62 e0       	ldi	r22, 0x02	; 2
    21a6:	41 e0       	ldi	r20, 0x01	; 1
    21a8:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	a0 ea       	ldi	r26, 0xA0	; 160
    21b2:	b0 e4       	ldi	r27, 0x40	; 64
    21b4:	8b 87       	std	Y+11, r24	; 0x0b
    21b6:	9c 87       	std	Y+12, r25	; 0x0c
    21b8:	ad 87       	std	Y+13, r26	; 0x0d
    21ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    21be:	7c 85       	ldd	r23, Y+12	; 0x0c
    21c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	4a ef       	ldi	r20, 0xFA	; 250
    21ca:	54 e4       	ldi	r21, 0x44	; 68
    21cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	8f 83       	std	Y+7, r24	; 0x07
    21d6:	98 87       	std	Y+8, r25	; 0x08
    21d8:	a9 87       	std	Y+9, r26	; 0x09
    21da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21dc:	6f 81       	ldd	r22, Y+7	; 0x07
    21de:	78 85       	ldd	r23, Y+8	; 0x08
    21e0:	89 85       	ldd	r24, Y+9	; 0x09
    21e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e8       	ldi	r20, 0x80	; 128
    21ea:	5f e3       	ldi	r21, 0x3F	; 63
    21ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21f0:	88 23       	and	r24, r24
    21f2:	2c f4       	brge	.+10     	; 0x21fe <LCD_vidWriteCharctr+0x98>
		__ticks = 1;
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	9e 83       	std	Y+6, r25	; 0x06
    21fa:	8d 83       	std	Y+5, r24	; 0x05
    21fc:	3f c0       	rjmp	.+126    	; 0x227c <LCD_vidWriteCharctr+0x116>
	else if (__tmp > 65535)
    21fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2200:	78 85       	ldd	r23, Y+8	; 0x08
    2202:	89 85       	ldd	r24, Y+9	; 0x09
    2204:	9a 85       	ldd	r25, Y+10	; 0x0a
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	3f ef       	ldi	r19, 0xFF	; 255
    220a:	4f e7       	ldi	r20, 0x7F	; 127
    220c:	57 e4       	ldi	r21, 0x47	; 71
    220e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2212:	18 16       	cp	r1, r24
    2214:	4c f5       	brge	.+82     	; 0x2268 <LCD_vidWriteCharctr+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2216:	6b 85       	ldd	r22, Y+11	; 0x0b
    2218:	7c 85       	ldd	r23, Y+12	; 0x0c
    221a:	8d 85       	ldd	r24, Y+13	; 0x0d
    221c:	9e 85       	ldd	r25, Y+14	; 0x0e
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	40 e2       	ldi	r20, 0x20	; 32
    2224:	51 e4       	ldi	r21, 0x41	; 65
    2226:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	bc 01       	movw	r22, r24
    2230:	cd 01       	movw	r24, r26
    2232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	9e 83       	std	Y+6, r25	; 0x06
    223c:	8d 83       	std	Y+5, r24	; 0x05
    223e:	0f c0       	rjmp	.+30     	; 0x225e <LCD_vidWriteCharctr+0xf8>
    2240:	88 ec       	ldi	r24, 0xC8	; 200
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	9c 83       	std	Y+4, r25	; 0x04
    2246:	8b 83       	std	Y+3, r24	; 0x03
    2248:	8b 81       	ldd	r24, Y+3	; 0x03
    224a:	9c 81       	ldd	r25, Y+4	; 0x04
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	f1 f7       	brne	.-4      	; 0x224c <LCD_vidWriteCharctr+0xe6>
    2250:	9c 83       	std	Y+4, r25	; 0x04
    2252:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2254:	8d 81       	ldd	r24, Y+5	; 0x05
    2256:	9e 81       	ldd	r25, Y+6	; 0x06
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	9e 83       	std	Y+6, r25	; 0x06
    225c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    225e:	8d 81       	ldd	r24, Y+5	; 0x05
    2260:	9e 81       	ldd	r25, Y+6	; 0x06
    2262:	00 97       	sbiw	r24, 0x00	; 0
    2264:	69 f7       	brne	.-38     	; 0x2240 <LCD_vidWriteCharctr+0xda>
    2266:	14 c0       	rjmp	.+40     	; 0x2290 <LCD_vidWriteCharctr+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2268:	6f 81       	ldd	r22, Y+7	; 0x07
    226a:	78 85       	ldd	r23, Y+8	; 0x08
    226c:	89 85       	ldd	r24, Y+9	; 0x09
    226e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	9e 83       	std	Y+6, r25	; 0x06
    227a:	8d 83       	std	Y+5, r24	; 0x05
    227c:	8d 81       	ldd	r24, Y+5	; 0x05
    227e:	9e 81       	ldd	r25, Y+6	; 0x06
    2280:	9a 83       	std	Y+2, r25	; 0x02
    2282:	89 83       	std	Y+1, r24	; 0x01
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	9a 81       	ldd	r25, Y+2	; 0x02
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	f1 f7       	brne	.-4      	; 0x2288 <LCD_vidWriteCharctr+0x122>
    228c:	9a 83       	std	Y+2, r25	; 0x02
    228e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_SetPinValue(lcd_CONTROLPORT,lcd_EPIN,PIN_LOW);
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	62 e0       	ldi	r22, 0x02	; 2
    2294:	40 e0       	ldi	r20, 0x00	; 0
    2296:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>
}
    229a:	2f 96       	adiw	r28, 0x0f	; 15
    229c:	0f b6       	in	r0, 0x3f	; 63
    229e:	f8 94       	cli
    22a0:	de bf       	out	0x3e, r29	; 62
    22a2:	0f be       	out	0x3f, r0	; 63
    22a4:	cd bf       	out	0x3d, r28	; 61
    22a6:	cf 91       	pop	r28
    22a8:	df 91       	pop	r29
    22aa:	08 95       	ret

000022ac <LCD_vidWriteString>:
void LCD_vidWriteString (u8* pu8StringCpy, u8 u8Index){
    22ac:	df 93       	push	r29
    22ae:	cf 93       	push	r28
    22b0:	00 d0       	rcall	.+0      	; 0x22b2 <LCD_vidWriteString+0x6>
    22b2:	00 d0       	rcall	.+0      	; 0x22b4 <LCD_vidWriteString+0x8>
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
    22b8:	9b 83       	std	Y+3, r25	; 0x03
    22ba:	8a 83       	std	Y+2, r24	; 0x02
    22bc:	6c 83       	std	Y+4, r22	; 0x04
	u8 i=0;
    22be:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<u8Index;i++){
    22c0:	19 82       	std	Y+1, r1	; 0x01
    22c2:	0e c0       	rjmp	.+28     	; 0x22e0 <LCD_vidWriteString+0x34>
		LCD_vidWriteCharctr(pu8StringCpy[i]);
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	28 2f       	mov	r18, r24
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	8a 81       	ldd	r24, Y+2	; 0x02
    22cc:	9b 81       	ldd	r25, Y+3	; 0x03
    22ce:	fc 01       	movw	r30, r24
    22d0:	e2 0f       	add	r30, r18
    22d2:	f3 1f       	adc	r31, r19
    22d4:	80 81       	ld	r24, Z
    22d6:	0e 94 b3 10 	call	0x2166	; 0x2166 <LCD_vidWriteCharctr>
	_delay_ms(5);
	DIO_SetPinValue(lcd_CONTROLPORT,lcd_EPIN,PIN_LOW);
}
void LCD_vidWriteString (u8* pu8StringCpy, u8 u8Index){
	u8 i=0;
	for(i=0;i<u8Index;i++){
    22da:	89 81       	ldd	r24, Y+1	; 0x01
    22dc:	8f 5f       	subi	r24, 0xFF	; 255
    22de:	89 83       	std	Y+1, r24	; 0x01
    22e0:	99 81       	ldd	r25, Y+1	; 0x01
    22e2:	8c 81       	ldd	r24, Y+4	; 0x04
    22e4:	98 17       	cp	r25, r24
    22e6:	70 f3       	brcs	.-36     	; 0x22c4 <LCD_vidWriteString+0x18>
		LCD_vidWriteCharctr(pu8StringCpy[i]);

	}
}
    22e8:	0f 90       	pop	r0
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	cf 91       	pop	r28
    22f2:	df 91       	pop	r29
    22f4:	08 95       	ret

000022f6 <Gotoxy>:
void Gotoxy (u8 Y,u8 X){
    22f6:	df 93       	push	r29
    22f8:	cf 93       	push	r28
    22fa:	00 d0       	rcall	.+0      	; 0x22fc <Gotoxy+0x6>
    22fc:	00 d0       	rcall	.+0      	; 0x22fe <Gotoxy+0x8>
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
    2302:	89 83       	std	Y+1, r24	; 0x01
    2304:	6a 83       	std	Y+2, r22	; 0x02
	if (X>=0 && X<=16)
    2306:	8a 81       	ldd	r24, Y+2	; 0x02
    2308:	81 31       	cpi	r24, 0x11	; 17
    230a:	c8 f4       	brcc	.+50     	; 0x233e <Gotoxy+0x48>
	{
		switch(Y)
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	28 2f       	mov	r18, r24
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	3c 83       	std	Y+4, r19	; 0x04
    2314:	2b 83       	std	Y+3, r18	; 0x03
    2316:	8b 81       	ldd	r24, Y+3	; 0x03
    2318:	9c 81       	ldd	r25, Y+4	; 0x04
    231a:	81 30       	cpi	r24, 0x01	; 1
    231c:	91 05       	cpc	r25, r1
    231e:	31 f0       	breq	.+12     	; 0x232c <Gotoxy+0x36>
    2320:	2b 81       	ldd	r18, Y+3	; 0x03
    2322:	3c 81       	ldd	r19, Y+4	; 0x04
    2324:	22 30       	cpi	r18, 0x02	; 2
    2326:	31 05       	cpc	r19, r1
    2328:	31 f0       	breq	.+12     	; 0x2336 <Gotoxy+0x40>
    232a:	09 c0       	rjmp	.+18     	; 0x233e <Gotoxy+0x48>
		{
		case 1:
			LCD_vidSendCommand(X+128);
    232c:	8a 81       	ldd	r24, Y+2	; 0x02
    232e:	80 58       	subi	r24, 0x80	; 128
    2330:	0e 94 10 10 	call	0x2020	; 0x2020 <LCD_vidSendCommand>
    2334:	04 c0       	rjmp	.+8      	; 0x233e <Gotoxy+0x48>
			break;
		case 2:
			LCD_vidSendCommand(X+192);
    2336:	8a 81       	ldd	r24, Y+2	; 0x02
    2338:	80 54       	subi	r24, 0x40	; 64
    233a:	0e 94 10 10 	call	0x2020	; 0x2020 <LCD_vidSendCommand>
			break;
		default:
			break;
		}
	}
}
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	cf 91       	pop	r28
    2348:	df 91       	pop	r29
    234a:	08 95       	ret

0000234c <Mater_init>:
#include "BIT_MATH.h"
#include "SPI_register.h"
#include "SPI_interface.h"

void Mater_init(void)
{
    234c:	df 93       	push	r29
    234e:	cf 93       	push	r28
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(SPCR,SPR0);
    2354:	ad e2       	ldi	r26, 0x2D	; 45
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	ed e2       	ldi	r30, 0x2D	; 45
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	81 60       	ori	r24, 0x01	; 1
    2360:	8c 93       	st	X, r24
	CLR_BIT(SPCR,SPR1);
    2362:	ad e2       	ldi	r26, 0x2D	; 45
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	ed e2       	ldi	r30, 0x2D	; 45
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	8d 7f       	andi	r24, 0xFD	; 253
    236e:	8c 93       	st	X, r24
	CLR_BIT(SPSR,SPI2X);
    2370:	ae e2       	ldi	r26, 0x2E	; 46
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	ee e2       	ldi	r30, 0x2E	; 46
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	80 81       	ld	r24, Z
    237a:	8e 7f       	andi	r24, 0xFE	; 254
    237c:	8c 93       	st	X, r24


	SET_BIT(SPCR,MSTR);
    237e:	ad e2       	ldi	r26, 0x2D	; 45
    2380:	b0 e0       	ldi	r27, 0x00	; 0
    2382:	ed e2       	ldi	r30, 0x2D	; 45
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	80 81       	ld	r24, Z
    2388:	80 61       	ori	r24, 0x10	; 16
    238a:	8c 93       	st	X, r24
	SET_BIT(SPCR,SPE);
    238c:	ad e2       	ldi	r26, 0x2D	; 45
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	ed e2       	ldi	r30, 0x2D	; 45
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	80 64       	ori	r24, 0x40	; 64
    2398:	8c 93       	st	X, r24


}
    239a:	cf 91       	pop	r28
    239c:	df 91       	pop	r29
    239e:	08 95       	ret

000023a0 <Slave_init>:

void Slave_init(void)
{
    23a0:	df 93       	push	r29
    23a2:	cf 93       	push	r28
    23a4:	cd b7       	in	r28, 0x3d	; 61
    23a6:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(SPCR,MSTR);
    23a8:	ad e2       	ldi	r26, 0x2D	; 45
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	ed e2       	ldi	r30, 0x2D	; 45
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	8f 7e       	andi	r24, 0xEF	; 239
    23b4:	8c 93       	st	X, r24
	SET_BIT(SPCR,SPE);
    23b6:	ad e2       	ldi	r26, 0x2D	; 45
    23b8:	b0 e0       	ldi	r27, 0x00	; 0
    23ba:	ed e2       	ldi	r30, 0x2D	; 45
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	80 64       	ori	r24, 0x40	; 64
    23c2:	8c 93       	st	X, r24
}
    23c4:	cf 91       	pop	r28
    23c6:	df 91       	pop	r29
    23c8:	08 95       	ret

000023ca <SPI_u8Transciever>:

u8 SPI_u8Transciever(u8 data){
    23ca:	df 93       	push	r29
    23cc:	cf 93       	push	r28
    23ce:	0f 92       	push	r0
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
    23d4:	89 83       	std	Y+1, r24	; 0x01
	SPDR=data;
    23d6:	ef e2       	ldi	r30, 0x2F	; 47
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	89 81       	ldd	r24, Y+1	; 0x01
    23dc:	80 83       	st	Z, r24
	while(GET_BIT(SPSR,SPIF)==0);
    23de:	ee e2       	ldi	r30, 0x2E	; 46
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	88 23       	and	r24, r24
    23e6:	dc f7       	brge	.-10     	; 0x23de <SPI_u8Transciever+0x14>
	return SPDR;
    23e8:	ef e2       	ldi	r30, 0x2F	; 47
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	80 81       	ld	r24, Z
}
    23ee:	0f 90       	pop	r0
    23f0:	cf 91       	pop	r28
    23f2:	df 91       	pop	r29
    23f4:	08 95       	ret

000023f6 <TIM0_voidInitialize>:
#include "Timer_interface.h"

void (*OVF_0_callback) (void)= 0;
void (*CTC_0_callback) (void)= 0;

void TIM0_voidInitialize(void){
    23f6:	df 93       	push	r29
    23f8:	cf 93       	push	r28
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
SET_BIT(TCCR0_Register,3);
    23fe:	a3 e5       	ldi	r26, 0x53	; 83
    2400:	b0 e0       	ldi	r27, 0x00	; 0
    2402:	e3 e5       	ldi	r30, 0x53	; 83
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	80 81       	ld	r24, Z
    2408:	88 60       	ori	r24, 0x08	; 8
    240a:	8c 93       	st	X, r24
SET_BIT(TCCR0_Register,6);
    240c:	a3 e5       	ldi	r26, 0x53	; 83
    240e:	b0 e0       	ldi	r27, 0x00	; 0
    2410:	e3 e5       	ldi	r30, 0x53	; 83
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	80 64       	ori	r24, 0x40	; 64
    2418:	8c 93       	st	X, r24

CLR_BIT(TCCR0_Register,0);
    241a:	a3 e5       	ldi	r26, 0x53	; 83
    241c:	b0 e0       	ldi	r27, 0x00	; 0
    241e:	e3 e5       	ldi	r30, 0x53	; 83
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	8e 7f       	andi	r24, 0xFE	; 254
    2426:	8c 93       	st	X, r24
SET_BIT(TCCR0_Register,1);
    2428:	a3 e5       	ldi	r26, 0x53	; 83
    242a:	b0 e0       	ldi	r27, 0x00	; 0
    242c:	e3 e5       	ldi	r30, 0x53	; 83
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	80 81       	ld	r24, Z
    2432:	82 60       	ori	r24, 0x02	; 2
    2434:	8c 93       	st	X, r24
CLR_BIT(TCCR0_Register,2);
    2436:	a3 e5       	ldi	r26, 0x53	; 83
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	e3 e5       	ldi	r30, 0x53	; 83
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	80 81       	ld	r24, Z
    2440:	8b 7f       	andi	r24, 0xFB	; 251
    2442:	8c 93       	st	X, r24


CLR_BIT(TCCR0_Register,4);
    2444:	a3 e5       	ldi	r26, 0x53	; 83
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	e3 e5       	ldi	r30, 0x53	; 83
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	8f 7e       	andi	r24, 0xEF	; 239
    2450:	8c 93       	st	X, r24
SET_BIT(TCCR0_Register,5);
    2452:	a3 e5       	ldi	r26, 0x53	; 83
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	e3 e5       	ldi	r30, 0x53	; 83
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	80 62       	ori	r24, 0x20	; 32
    245e:	8c 93       	st	X, r24
}
    2460:	cf 91       	pop	r28
    2462:	df 91       	pop	r29
    2464:	08 95       	ret

00002466 <TIM0_voidSetTimerReg>:

void TIM0_voidSetTimerReg(u8 Copy_u8Value){
    2466:	df 93       	push	r29
    2468:	cf 93       	push	r28
    246a:	0f 92       	push	r0
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
    2470:	89 83       	std	Y+1, r24	; 0x01
TCNT0_Register= Copy_u8Value;
    2472:	e2 e5       	ldi	r30, 0x52	; 82
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	89 81       	ldd	r24, Y+1	; 0x01
    2478:	80 83       	st	Z, r24
}
    247a:	0f 90       	pop	r0
    247c:	cf 91       	pop	r28
    247e:	df 91       	pop	r29
    2480:	08 95       	ret

00002482 <TIM0_voidSetCompareVal>:

void TIM0_voidSetCompareVal(u8 Copy_u8Value){
    2482:	df 93       	push	r29
    2484:	cf 93       	push	r28
    2486:	0f 92       	push	r0
    2488:	cd b7       	in	r28, 0x3d	; 61
    248a:	de b7       	in	r29, 0x3e	; 62
    248c:	89 83       	std	Y+1, r24	; 0x01
OCR0_Register=Copy_u8Value;
    248e:	ec e5       	ldi	r30, 0x5C	; 92
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	89 81       	ldd	r24, Y+1	; 0x01
    2494:	80 83       	st	Z, r24
}
    2496:	0f 90       	pop	r0
    2498:	cf 91       	pop	r28
    249a:	df 91       	pop	r29
    249c:	08 95       	ret

0000249e <TIM0_voidEnableOVINT>:

void TIM0_voidEnableOVINT(void){
    249e:	df 93       	push	r29
    24a0:	cf 93       	push	r28
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_Register,0);
    24a6:	a9 e5       	ldi	r26, 0x59	; 89
    24a8:	b0 e0       	ldi	r27, 0x00	; 0
    24aa:	e9 e5       	ldi	r30, 0x59	; 89
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	80 81       	ld	r24, Z
    24b0:	81 60       	ori	r24, 0x01	; 1
    24b2:	8c 93       	st	X, r24
}
    24b4:	cf 91       	pop	r28
    24b6:	df 91       	pop	r29
    24b8:	08 95       	ret

000024ba <TIM0_voidDisableOVINT>:

void TIM0_voidDisableOVINT(void){
    24ba:	df 93       	push	r29
    24bc:	cf 93       	push	r28
    24be:	cd b7       	in	r28, 0x3d	; 61
    24c0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_Register,0);
    24c2:	a9 e5       	ldi	r26, 0x59	; 89
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	e9 e5       	ldi	r30, 0x59	; 89
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	80 81       	ld	r24, Z
    24cc:	8e 7f       	andi	r24, 0xFE	; 254
    24ce:	8c 93       	st	X, r24
}
    24d0:	cf 91       	pop	r28
    24d2:	df 91       	pop	r29
    24d4:	08 95       	ret

000024d6 <TIM0_voidEnableCTCINT>:

void TIM0_voidEnableCTCINT(void){
    24d6:	df 93       	push	r29
    24d8:	cf 93       	push	r28
    24da:	cd b7       	in	r28, 0x3d	; 61
    24dc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_Register,1);
    24de:	a9 e5       	ldi	r26, 0x59	; 89
    24e0:	b0 e0       	ldi	r27, 0x00	; 0
    24e2:	e9 e5       	ldi	r30, 0x59	; 89
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	80 81       	ld	r24, Z
    24e8:	82 60       	ori	r24, 0x02	; 2
    24ea:	8c 93       	st	X, r24
}
    24ec:	cf 91       	pop	r28
    24ee:	df 91       	pop	r29
    24f0:	08 95       	ret

000024f2 <TIM0_voidDisableCTCINT>:

void TIM0_voidDisableCTCINT(void){
    24f2:	df 93       	push	r29
    24f4:	cf 93       	push	r28
    24f6:	cd b7       	in	r28, 0x3d	; 61
    24f8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_Register,1);
    24fa:	a9 e5       	ldi	r26, 0x59	; 89
    24fc:	b0 e0       	ldi	r27, 0x00	; 0
    24fe:	e9 e5       	ldi	r30, 0x59	; 89
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	8d 7f       	andi	r24, 0xFD	; 253
    2506:	8c 93       	st	X, r24
}
    2508:	cf 91       	pop	r28
    250a:	df 91       	pop	r29
    250c:	08 95       	ret

0000250e <TIM0_voidSetOVCallback>:

void TIM0_voidSetOVCallback( void (*callback_Copy_ptr) (void) ){
    250e:	df 93       	push	r29
    2510:	cf 93       	push	r28
    2512:	00 d0       	rcall	.+0      	; 0x2514 <TIM0_voidSetOVCallback+0x6>
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
    2518:	9a 83       	std	Y+2, r25	; 0x02
    251a:	89 83       	std	Y+1, r24	; 0x01
	OVF_0_callback=callback_Copy_ptr;
    251c:	89 81       	ldd	r24, Y+1	; 0x01
    251e:	9a 81       	ldd	r25, Y+2	; 0x02
    2520:	90 93 81 00 	sts	0x0081, r25
    2524:	80 93 80 00 	sts	0x0080, r24

}
    2528:	0f 90       	pop	r0
    252a:	0f 90       	pop	r0
    252c:	cf 91       	pop	r28
    252e:	df 91       	pop	r29
    2530:	08 95       	ret

00002532 <TIM0_voidSetCTCCallback>:

void TIM0_voidSetCTCCallback( void (*callback_Copy_ptr) (void) ){
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	00 d0       	rcall	.+0      	; 0x2538 <TIM0_voidSetCTCCallback+0x6>
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	9a 83       	std	Y+2, r25	; 0x02
    253e:	89 83       	std	Y+1, r24	; 0x01
	CTC_0_callback=callback_Copy_ptr;
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	9a 81       	ldd	r25, Y+2	; 0x02
    2544:	90 93 83 00 	sts	0x0083, r25
    2548:	80 93 82 00 	sts	0x0082, r24
}
    254c:	0f 90       	pop	r0
    254e:	0f 90       	pop	r0
    2550:	cf 91       	pop	r28
    2552:	df 91       	pop	r29
    2554:	08 95       	ret

00002556 <__vector_10>:



void __vector_10 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_10 (void){
    2556:	1f 92       	push	r1
    2558:	0f 92       	push	r0
    255a:	0f b6       	in	r0, 0x3f	; 63
    255c:	0f 92       	push	r0
    255e:	11 24       	eor	r1, r1
    2560:	2f 93       	push	r18
    2562:	3f 93       	push	r19
    2564:	4f 93       	push	r20
    2566:	5f 93       	push	r21
    2568:	6f 93       	push	r22
    256a:	7f 93       	push	r23
    256c:	8f 93       	push	r24
    256e:	9f 93       	push	r25
    2570:	af 93       	push	r26
    2572:	bf 93       	push	r27
    2574:	ef 93       	push	r30
    2576:	ff 93       	push	r31
    2578:	df 93       	push	r29
    257a:	cf 93       	push	r28
    257c:	cd b7       	in	r28, 0x3d	; 61
    257e:	de b7       	in	r29, 0x3e	; 62
	CTC_0_callback();
    2580:	e0 91 82 00 	lds	r30, 0x0082
    2584:	f0 91 83 00 	lds	r31, 0x0083
    2588:	09 95       	icall
}
    258a:	cf 91       	pop	r28
    258c:	df 91       	pop	r29
    258e:	ff 91       	pop	r31
    2590:	ef 91       	pop	r30
    2592:	bf 91       	pop	r27
    2594:	af 91       	pop	r26
    2596:	9f 91       	pop	r25
    2598:	8f 91       	pop	r24
    259a:	7f 91       	pop	r23
    259c:	6f 91       	pop	r22
    259e:	5f 91       	pop	r21
    25a0:	4f 91       	pop	r20
    25a2:	3f 91       	pop	r19
    25a4:	2f 91       	pop	r18
    25a6:	0f 90       	pop	r0
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	0f 90       	pop	r0
    25ac:	1f 90       	pop	r1
    25ae:	18 95       	reti

000025b0 <__vector_11>:


void __vector_11 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_11 (void){
    25b0:	1f 92       	push	r1
    25b2:	0f 92       	push	r0
    25b4:	0f b6       	in	r0, 0x3f	; 63
    25b6:	0f 92       	push	r0
    25b8:	11 24       	eor	r1, r1
    25ba:	2f 93       	push	r18
    25bc:	3f 93       	push	r19
    25be:	4f 93       	push	r20
    25c0:	5f 93       	push	r21
    25c2:	6f 93       	push	r22
    25c4:	7f 93       	push	r23
    25c6:	8f 93       	push	r24
    25c8:	9f 93       	push	r25
    25ca:	af 93       	push	r26
    25cc:	bf 93       	push	r27
    25ce:	ef 93       	push	r30
    25d0:	ff 93       	push	r31
    25d2:	df 93       	push	r29
    25d4:	cf 93       	push	r28
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
	OVF_0_callback();
    25da:	e0 91 80 00 	lds	r30, 0x0080
    25de:	f0 91 81 00 	lds	r31, 0x0081
    25e2:	09 95       	icall
}
    25e4:	cf 91       	pop	r28
    25e6:	df 91       	pop	r29
    25e8:	ff 91       	pop	r31
    25ea:	ef 91       	pop	r30
    25ec:	bf 91       	pop	r27
    25ee:	af 91       	pop	r26
    25f0:	9f 91       	pop	r25
    25f2:	8f 91       	pop	r24
    25f4:	7f 91       	pop	r23
    25f6:	6f 91       	pop	r22
    25f8:	5f 91       	pop	r21
    25fa:	4f 91       	pop	r20
    25fc:	3f 91       	pop	r19
    25fe:	2f 91       	pop	r18
    2600:	0f 90       	pop	r0
    2602:	0f be       	out	0x3f, r0	; 63
    2604:	0f 90       	pop	r0
    2606:	1f 90       	pop	r1
    2608:	18 95       	reti

0000260a <TIM1_voidInitialize>:


void TIM1_voidInitialize(void){
    260a:	df 93       	push	r29
    260c:	cf 93       	push	r28
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1A_Register,6);
    2612:	af e4       	ldi	r26, 0x4F	; 79
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	ef e4       	ldi	r30, 0x4F	; 79
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	80 81       	ld	r24, Z
    261c:	8f 7b       	andi	r24, 0xBF	; 191
    261e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_Register,7);
    2620:	af e4       	ldi	r26, 0x4F	; 79
    2622:	b0 e0       	ldi	r27, 0x00	; 0
    2624:	ef e4       	ldi	r30, 0x4F	; 79
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	80 81       	ld	r24, Z
    262a:	80 68       	ori	r24, 0x80	; 128
    262c:	8c 93       	st	X, r24

	CLR_BIT(TCCR1A_Register,0);
    262e:	af e4       	ldi	r26, 0x4F	; 79
    2630:	b0 e0       	ldi	r27, 0x00	; 0
    2632:	ef e4       	ldi	r30, 0x4F	; 79
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	80 81       	ld	r24, Z
    2638:	8e 7f       	andi	r24, 0xFE	; 254
    263a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_Register,1);
    263c:	af e4       	ldi	r26, 0x4F	; 79
    263e:	b0 e0       	ldi	r27, 0x00	; 0
    2640:	ef e4       	ldi	r30, 0x4F	; 79
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	80 81       	ld	r24, Z
    2646:	82 60       	ori	r24, 0x02	; 2
    2648:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register,3);
    264a:	ae e4       	ldi	r26, 0x4E	; 78
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	ee e4       	ldi	r30, 0x4E	; 78
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	80 81       	ld	r24, Z
    2654:	88 60       	ori	r24, 0x08	; 8
    2656:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register,4);
    2658:	ae e4       	ldi	r26, 0x4E	; 78
    265a:	b0 e0       	ldi	r27, 0x00	; 0
    265c:	ee e4       	ldi	r30, 0x4E	; 78
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
    2662:	80 61       	ori	r24, 0x10	; 16
    2664:	8c 93       	st	X, r24

	CLR_BIT(TCCR1B_Register,0);
    2666:	ae e4       	ldi	r26, 0x4E	; 78
    2668:	b0 e0       	ldi	r27, 0x00	; 0
    266a:	ee e4       	ldi	r30, 0x4E	; 78
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	80 81       	ld	r24, Z
    2670:	8e 7f       	andi	r24, 0xFE	; 254
    2672:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register,1);
    2674:	ae e4       	ldi	r26, 0x4E	; 78
    2676:	b0 e0       	ldi	r27, 0x00	; 0
    2678:	ee e4       	ldi	r30, 0x4E	; 78
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	80 81       	ld	r24, Z
    267e:	82 60       	ori	r24, 0x02	; 2
    2680:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_Register,2);
    2682:	ae e4       	ldi	r26, 0x4E	; 78
    2684:	b0 e0       	ldi	r27, 0x00	; 0
    2686:	ee e4       	ldi	r30, 0x4E	; 78
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	80 81       	ld	r24, Z
    268c:	8b 7f       	andi	r24, 0xFB	; 251
    268e:	8c 93       	st	X, r24

}
    2690:	cf 91       	pop	r28
    2692:	df 91       	pop	r29
    2694:	08 95       	ret

00002696 <TIM1_A_voidSetCompareVal>:

void TIM1_A_voidSetCompareVal(u16 Copy_u16Value){
    2696:	df 93       	push	r29
    2698:	cf 93       	push	r28
    269a:	00 d0       	rcall	.+0      	; 0x269c <TIM1_A_voidSetCompareVal+0x6>
    269c:	cd b7       	in	r28, 0x3d	; 61
    269e:	de b7       	in	r29, 0x3e	; 62
    26a0:	9a 83       	std	Y+2, r25	; 0x02
    26a2:	89 83       	std	Y+1, r24	; 0x01

	OCR1A_Register=Copy_u16Value;
    26a4:	ea e4       	ldi	r30, 0x4A	; 74
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	9a 81       	ldd	r25, Y+2	; 0x02
    26ac:	91 83       	std	Z+1, r25	; 0x01
    26ae:	80 83       	st	Z, r24

}
    26b0:	0f 90       	pop	r0
    26b2:	0f 90       	pop	r0
    26b4:	cf 91       	pop	r28
    26b6:	df 91       	pop	r29
    26b8:	08 95       	ret

000026ba <TIM1_B_voidSetCompareVal>:

void TIM1_B_voidSetCompareVal(u16 Copy_u16Value){
    26ba:	df 93       	push	r29
    26bc:	cf 93       	push	r28
    26be:	00 d0       	rcall	.+0      	; 0x26c0 <TIM1_B_voidSetCompareVal+0x6>
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    26c4:	9a 83       	std	Y+2, r25	; 0x02
    26c6:	89 83       	std	Y+1, r24	; 0x01
	OCR1B_Register=Copy_u16Value;
    26c8:	e8 e4       	ldi	r30, 0x48	; 72
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
    26ce:	9a 81       	ldd	r25, Y+2	; 0x02
    26d0:	91 83       	std	Z+1, r25	; 0x01
    26d2:	80 83       	st	Z, r24

}
    26d4:	0f 90       	pop	r0
    26d6:	0f 90       	pop	r0
    26d8:	cf 91       	pop	r28
    26da:	df 91       	pop	r29
    26dc:	08 95       	ret

000026de <TIM1_A_voidSetICR>:

void TIM1_A_voidSetICR(u16 Copy_u16Value){
    26de:	df 93       	push	r29
    26e0:	cf 93       	push	r28
    26e2:	00 d0       	rcall	.+0      	; 0x26e4 <TIM1_A_voidSetICR+0x6>
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
    26e8:	9a 83       	std	Y+2, r25	; 0x02
    26ea:	89 83       	std	Y+1, r24	; 0x01

	ICR1_Register=Copy_u16Value;
    26ec:	e6 e4       	ldi	r30, 0x46	; 70
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	89 81       	ldd	r24, Y+1	; 0x01
    26f2:	9a 81       	ldd	r25, Y+2	; 0x02
    26f4:	91 83       	std	Z+1, r25	; 0x01
    26f6:	80 83       	st	Z, r24

}
    26f8:	0f 90       	pop	r0
    26fa:	0f 90       	pop	r0
    26fc:	cf 91       	pop	r28
    26fe:	df 91       	pop	r29
    2700:	08 95       	ret

00002702 <UART_init>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "UART_register.h"
#include "UART_interface.h"

void UART_init(void){
    2702:	df 93       	push	r29
    2704:	cf 93       	push	r28
    2706:	0f 92       	push	r0
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
// control UCSRC register
u8 UCSRC_value=0;
    270c:	19 82       	std	Y+1, r1	; 0x01
SET_BIT(UCSRC_value,7);
    270e:	89 81       	ldd	r24, Y+1	; 0x01
    2710:	80 68       	ori	r24, 0x80	; 128
    2712:	89 83       	std	Y+1, r24	; 0x01

// make 8 bits for data
SET_BIT(UCSRC_value,1);
    2714:	89 81       	ldd	r24, Y+1	; 0x01
    2716:	82 60       	ori	r24, 0x02	; 2
    2718:	89 83       	std	Y+1, r24	; 0x01
SET_BIT(UCSRC_value,2);
    271a:	89 81       	ldd	r24, Y+1	; 0x01
    271c:	84 60       	ori	r24, 0x04	; 4
    271e:	89 83       	std	Y+1, r24	; 0x01

UCSRC=UCSRC_value;
    2720:	e0 e4       	ldi	r30, 0x40	; 64
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	89 81       	ldd	r24, Y+1	; 0x01
    2726:	80 83       	st	Z, r24

// make baud rate = 9600 bps

 UBRRL=51;
    2728:	e9 e2       	ldi	r30, 0x29	; 41
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	83 e3       	ldi	r24, 0x33	; 51
    272e:	80 83       	st	Z, r24


//enable transmit and recive
SET_BIT(UCSRB,RXEN);
    2730:	aa e2       	ldi	r26, 0x2A	; 42
    2732:	b0 e0       	ldi	r27, 0x00	; 0
    2734:	ea e2       	ldi	r30, 0x2A	; 42
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 81       	ld	r24, Z
    273a:	80 61       	ori	r24, 0x10	; 16
    273c:	8c 93       	st	X, r24
SET_BIT(UCSRB,TXEN);
    273e:	aa e2       	ldi	r26, 0x2A	; 42
    2740:	b0 e0       	ldi	r27, 0x00	; 0
    2742:	ea e2       	ldi	r30, 0x2A	; 42
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	80 81       	ld	r24, Z
    2748:	88 60       	ori	r24, 0x08	; 8
    274a:	8c 93       	st	X, r24
}
    274c:	0f 90       	pop	r0
    274e:	cf 91       	pop	r28
    2750:	df 91       	pop	r29
    2752:	08 95       	ret

00002754 <UART_sendchar>:
void UART_sendchar(u8 data){
    2754:	df 93       	push	r29
    2756:	cf 93       	push	r28
    2758:	0f 92       	push	r0
    275a:	cd b7       	in	r28, 0x3d	; 61
    275c:	de b7       	in	r29, 0x3e	; 62
    275e:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA,UDRE)==0);
    2760:	eb e2       	ldi	r30, 0x2B	; 43
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	80 81       	ld	r24, Z
    2766:	82 95       	swap	r24
    2768:	86 95       	lsr	r24
    276a:	87 70       	andi	r24, 0x07	; 7
    276c:	88 2f       	mov	r24, r24
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	81 70       	andi	r24, 0x01	; 1
    2772:	90 70       	andi	r25, 0x00	; 0
    2774:	00 97       	sbiw	r24, 0x00	; 0
    2776:	a1 f3       	breq	.-24     	; 0x2760 <UART_sendchar+0xc>
 UDR=data;
    2778:	ec e2       	ldi	r30, 0x2C	; 44
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	89 81       	ldd	r24, Y+1	; 0x01
    277e:	80 83       	st	Z, r24
}
    2780:	0f 90       	pop	r0
    2782:	cf 91       	pop	r28
    2784:	df 91       	pop	r29
    2786:	08 95       	ret

00002788 <UART_recievechar>:
u8 UART_recievechar(void){
    2788:	df 93       	push	r29
    278a:	cf 93       	push	r28
    278c:	cd b7       	in	r28, 0x3d	; 61
    278e:	de b7       	in	r29, 0x3e	; 62
while(GET_BIT(UCSRA,RXC)==0);
    2790:	eb e2       	ldi	r30, 0x2B	; 43
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	80 81       	ld	r24, Z
    2796:	88 23       	and	r24, r24
    2798:	dc f7       	brge	.-10     	; 0x2790 <UART_recievechar+0x8>
return UDR;
    279a:	ec e2       	ldi	r30, 0x2C	; 44
    279c:	f0 e0       	ldi	r31, 0x00	; 0
    279e:	80 81       	ld	r24, Z
}
    27a0:	cf 91       	pop	r28
    27a2:	df 91       	pop	r29
    27a4:	08 95       	ret

000027a6 <func_init>:
#include "BIT_MATH.h"

#include "WDT_interface.h"
#include "WDT_register.h"

void func_init(u8 prescaler){
    27a6:	df 93       	push	r29
    27a8:	cf 93       	push	r28
    27aa:	00 d0       	rcall	.+0      	; 0x27ac <func_init+0x6>
    27ac:	0f 92       	push	r0
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62
    27b2:	89 83       	std	Y+1, r24	; 0x01
	switch(prescaler){
    27b4:	89 81       	ldd	r24, Y+1	; 0x01
    27b6:	28 2f       	mov	r18, r24
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	3b 83       	std	Y+3, r19	; 0x03
    27bc:	2a 83       	std	Y+2, r18	; 0x02
    27be:	8a 81       	ldd	r24, Y+2	; 0x02
    27c0:	9b 81       	ldd	r25, Y+3	; 0x03
    27c2:	83 30       	cpi	r24, 0x03	; 3
    27c4:	91 05       	cpc	r25, r1
    27c6:	09 f4       	brne	.+2      	; 0x27ca <func_init+0x24>
    27c8:	70 c0       	rjmp	.+224    	; 0x28aa <func_init+0x104>
    27ca:	2a 81       	ldd	r18, Y+2	; 0x02
    27cc:	3b 81       	ldd	r19, Y+3	; 0x03
    27ce:	24 30       	cpi	r18, 0x04	; 4
    27d0:	31 05       	cpc	r19, r1
    27d2:	84 f4       	brge	.+32     	; 0x27f4 <func_init+0x4e>
    27d4:	8a 81       	ldd	r24, Y+2	; 0x02
    27d6:	9b 81       	ldd	r25, Y+3	; 0x03
    27d8:	81 30       	cpi	r24, 0x01	; 1
    27da:	91 05       	cpc	r25, r1
    27dc:	d1 f1       	breq	.+116    	; 0x2852 <func_init+0xac>
    27de:	2a 81       	ldd	r18, Y+2	; 0x02
    27e0:	3b 81       	ldd	r19, Y+3	; 0x03
    27e2:	22 30       	cpi	r18, 0x02	; 2
    27e4:	31 05       	cpc	r19, r1
    27e6:	0c f0       	brlt	.+2      	; 0x27ea <func_init+0x44>
    27e8:	4a c0       	rjmp	.+148    	; 0x287e <func_init+0xd8>
    27ea:	8a 81       	ldd	r24, Y+2	; 0x02
    27ec:	9b 81       	ldd	r25, Y+3	; 0x03
    27ee:	00 97       	sbiw	r24, 0x00	; 0
    27f0:	d1 f0       	breq	.+52     	; 0x2826 <func_init+0x80>
    27f2:	c8 c0       	rjmp	.+400    	; 0x2984 <func_init+0x1de>
    27f4:	2a 81       	ldd	r18, Y+2	; 0x02
    27f6:	3b 81       	ldd	r19, Y+3	; 0x03
    27f8:	25 30       	cpi	r18, 0x05	; 5
    27fa:	31 05       	cpc	r19, r1
    27fc:	09 f4       	brne	.+2      	; 0x2800 <func_init+0x5a>
    27fe:	81 c0       	rjmp	.+258    	; 0x2902 <func_init+0x15c>
    2800:	8a 81       	ldd	r24, Y+2	; 0x02
    2802:	9b 81       	ldd	r25, Y+3	; 0x03
    2804:	85 30       	cpi	r24, 0x05	; 5
    2806:	91 05       	cpc	r25, r1
    2808:	0c f4       	brge	.+2      	; 0x280c <func_init+0x66>
    280a:	65 c0       	rjmp	.+202    	; 0x28d6 <func_init+0x130>
    280c:	2a 81       	ldd	r18, Y+2	; 0x02
    280e:	3b 81       	ldd	r19, Y+3	; 0x03
    2810:	26 30       	cpi	r18, 0x06	; 6
    2812:	31 05       	cpc	r19, r1
    2814:	09 f4       	brne	.+2      	; 0x2818 <func_init+0x72>
    2816:	8b c0       	rjmp	.+278    	; 0x292e <func_init+0x188>
    2818:	8a 81       	ldd	r24, Y+2	; 0x02
    281a:	9b 81       	ldd	r25, Y+3	; 0x03
    281c:	87 30       	cpi	r24, 0x07	; 7
    281e:	91 05       	cpc	r25, r1
    2820:	09 f4       	brne	.+2      	; 0x2824 <func_init+0x7e>
    2822:	9b c0       	rjmp	.+310    	; 0x295a <func_init+0x1b4>
    2824:	af c0       	rjmp	.+350    	; 0x2984 <func_init+0x1de>
	case WDG_163MS:{
		CLR_BIT(WDTCR,WDP0);
    2826:	a1 e4       	ldi	r26, 0x41	; 65
    2828:	b0 e0       	ldi	r27, 0x00	; 0
    282a:	e1 e4       	ldi	r30, 0x41	; 65
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	80 81       	ld	r24, Z
    2830:	8e 7f       	andi	r24, 0xFE	; 254
    2832:	8c 93       	st	X, r24
		CLR_BIT(WDTCR,WDP1);
    2834:	a1 e4       	ldi	r26, 0x41	; 65
    2836:	b0 e0       	ldi	r27, 0x00	; 0
    2838:	e1 e4       	ldi	r30, 0x41	; 65
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	80 81       	ld	r24, Z
    283e:	8d 7f       	andi	r24, 0xFD	; 253
    2840:	8c 93       	st	X, r24
		CLR_BIT(WDTCR,WDP2);
    2842:	a1 e4       	ldi	r26, 0x41	; 65
    2844:	b0 e0       	ldi	r27, 0x00	; 0
    2846:	e1 e4       	ldi	r30, 0x41	; 65
    2848:	f0 e0       	ldi	r31, 0x00	; 0
    284a:	80 81       	ld	r24, Z
    284c:	8b 7f       	andi	r24, 0xFB	; 251
    284e:	8c 93       	st	X, r24
    2850:	99 c0       	rjmp	.+306    	; 0x2984 <func_init+0x1de>
		break;
	}
	case WDG_325MS:{
		SET_BIT(WDTCR,WDP0);
    2852:	a1 e4       	ldi	r26, 0x41	; 65
    2854:	b0 e0       	ldi	r27, 0x00	; 0
    2856:	e1 e4       	ldi	r30, 0x41	; 65
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	80 81       	ld	r24, Z
    285c:	81 60       	ori	r24, 0x01	; 1
    285e:	8c 93       	st	X, r24
		CLR_BIT(WDTCR,WDP1);
    2860:	a1 e4       	ldi	r26, 0x41	; 65
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	e1 e4       	ldi	r30, 0x41	; 65
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	8d 7f       	andi	r24, 0xFD	; 253
    286c:	8c 93       	st	X, r24
		CLR_BIT(WDTCR,WDP2);
    286e:	a1 e4       	ldi	r26, 0x41	; 65
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	e1 e4       	ldi	r30, 0x41	; 65
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	80 81       	ld	r24, Z
    2878:	8b 7f       	andi	r24, 0xFB	; 251
    287a:	8c 93       	st	X, r24
    287c:	83 c0       	rjmp	.+262    	; 0x2984 <func_init+0x1de>
		break;
	}
	case WDG_65MS:{
		CLR_BIT(WDTCR,WDP0);
    287e:	a1 e4       	ldi	r26, 0x41	; 65
    2880:	b0 e0       	ldi	r27, 0x00	; 0
    2882:	e1 e4       	ldi	r30, 0x41	; 65
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	80 81       	ld	r24, Z
    2888:	8e 7f       	andi	r24, 0xFE	; 254
    288a:	8c 93       	st	X, r24
		SET_BIT(WDTCR,WDP1);
    288c:	a1 e4       	ldi	r26, 0x41	; 65
    288e:	b0 e0       	ldi	r27, 0x00	; 0
    2890:	e1 e4       	ldi	r30, 0x41	; 65
    2892:	f0 e0       	ldi	r31, 0x00	; 0
    2894:	80 81       	ld	r24, Z
    2896:	82 60       	ori	r24, 0x02	; 2
    2898:	8c 93       	st	X, r24
		CLR_BIT(WDTCR,WDP2);
    289a:	a1 e4       	ldi	r26, 0x41	; 65
    289c:	b0 e0       	ldi	r27, 0x00	; 0
    289e:	e1 e4       	ldi	r30, 0x41	; 65
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	80 81       	ld	r24, Z
    28a4:	8b 7f       	andi	r24, 0xFB	; 251
    28a6:	8c 93       	st	X, r24
    28a8:	6d c0       	rjmp	.+218    	; 0x2984 <func_init+0x1de>
		break;
	}
	case WDG_13S:{
		SET_BIT(WDTCR,WDP0);
    28aa:	a1 e4       	ldi	r26, 0x41	; 65
    28ac:	b0 e0       	ldi	r27, 0x00	; 0
    28ae:	e1 e4       	ldi	r30, 0x41	; 65
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	80 81       	ld	r24, Z
    28b4:	81 60       	ori	r24, 0x01	; 1
    28b6:	8c 93       	st	X, r24
		SET_BIT(WDTCR,WDP1);
    28b8:	a1 e4       	ldi	r26, 0x41	; 65
    28ba:	b0 e0       	ldi	r27, 0x00	; 0
    28bc:	e1 e4       	ldi	r30, 0x41	; 65
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	80 81       	ld	r24, Z
    28c2:	82 60       	ori	r24, 0x02	; 2
    28c4:	8c 93       	st	X, r24
		CLR_BIT(WDTCR,WDP2);
    28c6:	a1 e4       	ldi	r26, 0x41	; 65
    28c8:	b0 e0       	ldi	r27, 0x00	; 0
    28ca:	e1 e4       	ldi	r30, 0x41	; 65
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	80 81       	ld	r24, Z
    28d0:	8b 7f       	andi	r24, 0xFB	; 251
    28d2:	8c 93       	st	X, r24
    28d4:	57 c0       	rjmp	.+174    	; 0x2984 <func_init+0x1de>
		break;
	}
	case WDG_26S:{
		CLR_BIT(WDTCR,WDP0);
    28d6:	a1 e4       	ldi	r26, 0x41	; 65
    28d8:	b0 e0       	ldi	r27, 0x00	; 0
    28da:	e1 e4       	ldi	r30, 0x41	; 65
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	80 81       	ld	r24, Z
    28e0:	8e 7f       	andi	r24, 0xFE	; 254
    28e2:	8c 93       	st	X, r24
		CLR_BIT(WDTCR,WDP1);
    28e4:	a1 e4       	ldi	r26, 0x41	; 65
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	e1 e4       	ldi	r30, 0x41	; 65
    28ea:	f0 e0       	ldi	r31, 0x00	; 0
    28ec:	80 81       	ld	r24, Z
    28ee:	8d 7f       	andi	r24, 0xFD	; 253
    28f0:	8c 93       	st	X, r24
		SET_BIT(WDTCR,WDP2);
    28f2:	a1 e4       	ldi	r26, 0x41	; 65
    28f4:	b0 e0       	ldi	r27, 0x00	; 0
    28f6:	e1 e4       	ldi	r30, 0x41	; 65
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	80 81       	ld	r24, Z
    28fc:	84 60       	ori	r24, 0x04	; 4
    28fe:	8c 93       	st	X, r24
    2900:	41 c0       	rjmp	.+130    	; 0x2984 <func_init+0x1de>
		break;
	}
	case WDG_52S:{
		SET_BIT(WDTCR,WDP0);
    2902:	a1 e4       	ldi	r26, 0x41	; 65
    2904:	b0 e0       	ldi	r27, 0x00	; 0
    2906:	e1 e4       	ldi	r30, 0x41	; 65
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	80 81       	ld	r24, Z
    290c:	81 60       	ori	r24, 0x01	; 1
    290e:	8c 93       	st	X, r24
		CLR_BIT(WDTCR,WDP1);
    2910:	a1 e4       	ldi	r26, 0x41	; 65
    2912:	b0 e0       	ldi	r27, 0x00	; 0
    2914:	e1 e4       	ldi	r30, 0x41	; 65
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
    291a:	8d 7f       	andi	r24, 0xFD	; 253
    291c:	8c 93       	st	X, r24
		SET_BIT(WDTCR,WDP2);
    291e:	a1 e4       	ldi	r26, 0x41	; 65
    2920:	b0 e0       	ldi	r27, 0x00	; 0
    2922:	e1 e4       	ldi	r30, 0x41	; 65
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	80 81       	ld	r24, Z
    2928:	84 60       	ori	r24, 0x04	; 4
    292a:	8c 93       	st	X, r24
    292c:	2b c0       	rjmp	.+86     	; 0x2984 <func_init+0x1de>
		break;
	}
	case WDG_1:{
		CLR_BIT(WDTCR,WDP0);
    292e:	a1 e4       	ldi	r26, 0x41	; 65
    2930:	b0 e0       	ldi	r27, 0x00	; 0
    2932:	e1 e4       	ldi	r30, 0x41	; 65
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	80 81       	ld	r24, Z
    2938:	8e 7f       	andi	r24, 0xFE	; 254
    293a:	8c 93       	st	X, r24
		SET_BIT(WDTCR,WDP1);
    293c:	a1 e4       	ldi	r26, 0x41	; 65
    293e:	b0 e0       	ldi	r27, 0x00	; 0
    2940:	e1 e4       	ldi	r30, 0x41	; 65
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	80 81       	ld	r24, Z
    2946:	82 60       	ori	r24, 0x02	; 2
    2948:	8c 93       	st	X, r24
		SET_BIT(WDTCR,WDP2);
    294a:	a1 e4       	ldi	r26, 0x41	; 65
    294c:	b0 e0       	ldi	r27, 0x00	; 0
    294e:	e1 e4       	ldi	r30, 0x41	; 65
    2950:	f0 e0       	ldi	r31, 0x00	; 0
    2952:	80 81       	ld	r24, Z
    2954:	84 60       	ori	r24, 0x04	; 4
    2956:	8c 93       	st	X, r24
    2958:	15 c0       	rjmp	.+42     	; 0x2984 <func_init+0x1de>
		break;
	}
	case WDG_2_1:{
		SET_BIT(WDTCR,WDP0);
    295a:	a1 e4       	ldi	r26, 0x41	; 65
    295c:	b0 e0       	ldi	r27, 0x00	; 0
    295e:	e1 e4       	ldi	r30, 0x41	; 65
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	80 81       	ld	r24, Z
    2964:	81 60       	ori	r24, 0x01	; 1
    2966:	8c 93       	st	X, r24
		SET_BIT(WDTCR,WDP1);
    2968:	a1 e4       	ldi	r26, 0x41	; 65
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	e1 e4       	ldi	r30, 0x41	; 65
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	80 81       	ld	r24, Z
    2972:	82 60       	ori	r24, 0x02	; 2
    2974:	8c 93       	st	X, r24
		SET_BIT(WDTCR,WDP2);
    2976:	a1 e4       	ldi	r26, 0x41	; 65
    2978:	b0 e0       	ldi	r27, 0x00	; 0
    297a:	e1 e4       	ldi	r30, 0x41	; 65
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	80 81       	ld	r24, Z
    2980:	84 60       	ori	r24, 0x04	; 4
    2982:	8c 93       	st	X, r24
		break;
	}
	default:
		break;
	}
}
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	cf 91       	pop	r28
    298c:	df 91       	pop	r29
    298e:	08 95       	ret

00002990 <WDT_ON>:
void WDT_ON(void){
    2990:	df 93       	push	r29
    2992:	cf 93       	push	r28
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR,WDE);
    2998:	a1 e4       	ldi	r26, 0x41	; 65
    299a:	b0 e0       	ldi	r27, 0x00	; 0
    299c:	e1 e4       	ldi	r30, 0x41	; 65
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	80 81       	ld	r24, Z
    29a2:	88 60       	ori	r24, 0x08	; 8
    29a4:	8c 93       	st	X, r24
}
    29a6:	cf 91       	pop	r28
    29a8:	df 91       	pop	r29
    29aa:	08 95       	ret

000029ac <WDT_OFF>:
void WDT_OFF(void){
    29ac:	df 93       	push	r29
    29ae:	cf 93       	push	r28
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
	WDTCR = (1<<WDE) | (1<<WDTOE);
    29b4:	e1 e4       	ldi	r30, 0x41	; 65
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	88 e1       	ldi	r24, 0x18	; 24
    29ba:	80 83       	st	Z, r24
	WDTCR=0x00;
    29bc:	e1 e4       	ldi	r30, 0x41	; 65
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	10 82       	st	Z, r1
}
    29c2:	cf 91       	pop	r28
    29c4:	df 91       	pop	r29
    29c6:	08 95       	ret

000029c8 <main>:
int detect_flag=1;
int ir_flag=0;

void ir (void);

void main(void){
    29c8:	df 93       	push	r29
    29ca:	cf 93       	push	r28
    29cc:	00 d0       	rcall	.+0      	; 0x29ce <main+0x6>
    29ce:	00 d0       	rcall	.+0      	; 0x29d0 <main+0x8>
    29d0:	00 d0       	rcall	.+0      	; 0x29d2 <main+0xa>
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(PORT_D,ir_pin,PIN_INPUT);
    29d6:	83 e0       	ldi	r24, 0x03	; 3
    29d8:	62 e0       	ldi	r22, 0x02	; 2
    29da:	40 e0       	ldi	r20, 0x00	; 0
    29dc:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_SetPinDirection>
	DIO_SetPinValue(PORT_D,ir_pin,PIN_HIGH);
    29e0:	83 e0       	ldi	r24, 0x03	; 3
    29e2:	62 e0       	ldi	r22, 0x02	; 2
    29e4:	41 e0       	ldi	r20, 0x01	; 1
    29e6:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>
	DIO_SetPinDirection(PORT_A,line_follower_pin,PIN_INPUT);
    29ea:	80 e0       	ldi	r24, 0x00	; 0
    29ec:	67 e0       	ldi	r22, 0x07	; 7
    29ee:	40 e0       	ldi	r20, 0x00	; 0
    29f0:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_B,Puzzer_pin,PIN_OUTPUT);
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	60 e0       	ldi	r22, 0x00	; 0
    29f8:	41 e0       	ldi	r20, 0x01	; 1
    29fa:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_SetPinDirection>
	ADC_Init();
    29fe:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_Init>
	Global_Interrupt_Enable();
    2a02:	0e 94 b3 0b 	call	0x1766	; 0x1766 <Global_Interrupt_Enable>
	EXT_INTERRUPT_VID_INTI();
    2a06:	0e 94 65 0a 	call	0x14ca	; 0x14ca <EXT_INTERRUPT_VID_INTI>
	EXT_INTERRUPT_VID_ENABLE(EXT0);
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
    2a0c:	0e 94 88 0a 	call	0x1510	; 0x1510 <EXT_INTERRUPT_VID_ENABLE>
	EXT0_VID_SET_CALL_BACK(ir);
    2a10:	82 e8       	ldi	r24, 0x82	; 130
    2a12:	95 e1       	ldi	r25, 0x15	; 21
    2a14:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <EXT0_VID_SET_CALL_BACK>
	DC_MOTOR_Init();
    2a18:	0e 94 91 15 	call	0x2b22	; 0x2b22 <DC_MOTOR_Init>
	Init_Timer1();
    2a1c:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <Init_Timer1>
	PWM_Timer0_Init();
    2a20:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <PWM_Timer0_Init>
	Set_Motor_Speed(205);
    2a24:	8d ec       	ldi	r24, 0xCD	; 205
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	0e 94 81 16 	call	0x2d02	; 0x2d02 <Set_Motor_Speed>
    2a2c:	5b c0       	rjmp	.+182    	; 0x2ae4 <main+0x11c>
	while(detect_flag){
		u16 READING=ADC_Read(Channel_A7);
    2a2e:	87 e0       	ldi	r24, 0x07	; 7
    2a30:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_Read>
    2a34:	9e 83       	std	Y+6, r25	; 0x06
    2a36:	8d 83       	std	Y+5, r24	; 0x05
		u32 RESULT=((u32)READING*5000)/1024;
    2a38:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a3c:	cc 01       	movw	r24, r24
    2a3e:	a0 e0       	ldi	r26, 0x00	; 0
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	28 e8       	ldi	r18, 0x88	; 136
    2a44:	33 e1       	ldi	r19, 0x13	; 19
    2a46:	40 e0       	ldi	r20, 0x00	; 0
    2a48:	50 e0       	ldi	r21, 0x00	; 0
    2a4a:	bc 01       	movw	r22, r24
    2a4c:	cd 01       	movw	r24, r26
    2a4e:	0e 94 db 16 	call	0x2db6	; 0x2db6 <__mulsi3>
    2a52:	dc 01       	movw	r26, r24
    2a54:	cb 01       	movw	r24, r22
    2a56:	07 2e       	mov	r0, r23
    2a58:	7a e0       	ldi	r23, 0x0A	; 10
    2a5a:	b6 95       	lsr	r27
    2a5c:	a7 95       	ror	r26
    2a5e:	97 95       	ror	r25
    2a60:	87 95       	ror	r24
    2a62:	7a 95       	dec	r23
    2a64:	d1 f7       	brne	.-12     	; 0x2a5a <main+0x92>
    2a66:	70 2d       	mov	r23, r0
    2a68:	89 83       	std	Y+1, r24	; 0x01
    2a6a:	9a 83       	std	Y+2, r25	; 0x02
    2a6c:	ab 83       	std	Y+3, r26	; 0x03
    2a6e:	bc 83       	std	Y+4, r27	; 0x04
		if (RESULT<300){
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
    2a72:	9a 81       	ldd	r25, Y+2	; 0x02
    2a74:	ab 81       	ldd	r26, Y+3	; 0x03
    2a76:	bc 81       	ldd	r27, Y+4	; 0x04
    2a78:	8c 32       	cpi	r24, 0x2C	; 44
    2a7a:	21 e0       	ldi	r18, 0x01	; 1
    2a7c:	92 07       	cpc	r25, r18
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	a2 07       	cpc	r26, r18
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	b2 07       	cpc	r27, r18
    2a86:	18 f4       	brcc	.+6      	; 0x2a8e <main+0xc6>
			DC_MOTOR_FORWARD();
    2a88:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <DC_MOTOR_FORWARD>
    2a8c:	25 c0       	rjmp	.+74     	; 0x2ad8 <main+0x110>
		}
		else {
        	DC_MOTOR_Turnoff();
    2a8e:	0e 94 21 16 	call	0x2c42	; 0x2c42 <DC_MOTOR_Turnoff>
        	DIO_SetPinValue(PORT_B,Puzzer_pin,PIN_HIGH);
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	60 e0       	ldi	r22, 0x00	; 0
    2a96:	41 e0       	ldi	r20, 0x01	; 1
    2a98:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>
        	Delay_Seconds(1);
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <Delay_Seconds>
        	DIO_SetPinValue(PORT_B,Puzzer_pin,PIN_LOW);
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	60 e0       	ldi	r22, 0x00	; 0
    2aa8:	40 e0       	ldi	r20, 0x00	; 0
    2aaa:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>
        	detect_flag=0;
    2aae:	10 92 79 00 	sts	0x0079, r1
    2ab2:	10 92 78 00 	sts	0x0078, r1
    2ab6:	10 c0       	rjmp	.+32     	; 0x2ad8 <main+0x110>
		}
		while(ir_flag){
			DC_MOTOR_BACK();
    2ab8:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <DC_MOTOR_BACK>
			Delay_Seconds(2);
    2abc:	82 e0       	ldi	r24, 0x02	; 2
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <Delay_Seconds>
			DC_MOTOR_LEFT();
    2ac4:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <DC_MOTOR_LEFT>
			Delay_Seconds(2);
    2ac8:	82 e0       	ldi	r24, 0x02	; 2
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <Delay_Seconds>
			ir_flag=0;
    2ad0:	10 92 85 00 	sts	0x0085, r1
    2ad4:	10 92 84 00 	sts	0x0084, r1
        	DIO_SetPinValue(PORT_B,Puzzer_pin,PIN_HIGH);
        	Delay_Seconds(1);
        	DIO_SetPinValue(PORT_B,Puzzer_pin,PIN_LOW);
        	detect_flag=0;
		}
		while(ir_flag){
    2ad8:	80 91 84 00 	lds	r24, 0x0084
    2adc:	90 91 85 00 	lds	r25, 0x0085
    2ae0:	00 97       	sbiw	r24, 0x00	; 0
    2ae2:	51 f7       	brne	.-44     	; 0x2ab8 <main+0xf0>
	EXT0_VID_SET_CALL_BACK(ir);
	DC_MOTOR_Init();
	Init_Timer1();
	PWM_Timer0_Init();
	Set_Motor_Speed(205);
	while(detect_flag){
    2ae4:	80 91 78 00 	lds	r24, 0x0078
    2ae8:	90 91 79 00 	lds	r25, 0x0079
    2aec:	00 97       	sbiw	r24, 0x00	; 0
    2aee:	09 f0       	breq	.+2      	; 0x2af2 <main+0x12a>
    2af0:	9e cf       	rjmp	.-196    	; 0x2a2e <main+0x66>
			DC_MOTOR_LEFT();
			Delay_Seconds(2);
			ir_flag=0;
		}
	}
}
    2af2:	26 96       	adiw	r28, 0x06	; 6
    2af4:	0f b6       	in	r0, 0x3f	; 63
    2af6:	f8 94       	cli
    2af8:	de bf       	out	0x3e, r29	; 62
    2afa:	0f be       	out	0x3f, r0	; 63
    2afc:	cd bf       	out	0x3d, r28	; 61
    2afe:	cf 91       	pop	r28
    2b00:	df 91       	pop	r29
    2b02:	08 95       	ret

00002b04 <ir>:

void ir (void){
    2b04:	df 93       	push	r29
    2b06:	cf 93       	push	r28
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
	DC_MOTOR_Turnoff();
    2b0c:	0e 94 21 16 	call	0x2c42	; 0x2c42 <DC_MOTOR_Turnoff>
	ir_flag=1;
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	90 93 85 00 	sts	0x0085, r25
    2b18:	80 93 84 00 	sts	0x0084, r24
}
    2b1c:	cf 91       	pop	r28
    2b1e:	df 91       	pop	r29
    2b20:	08 95       	ret

00002b22 <DC_MOTOR_Init>:
#include "DIO_interface.h"
#include "Timer_register.h"
#include "Timer_interface.h"
#include "motor_interface.h"

void DC_MOTOR_Init(){
    2b22:	df 93       	push	r29
    2b24:	cf 93       	push	r28
    2b26:	cd b7       	in	r28, 0x3d	; 61
    2b28:	de b7       	in	r29, 0x3e	; 62

	DIO_SetPinDirection(DC_MOTOR_INPUT,DC_MOTOR_IN1,PIN_OUTPUT);
    2b2a:	80 e0       	ldi	r24, 0x00	; 0
    2b2c:	60 e0       	ldi	r22, 0x00	; 0
    2b2e:	41 e0       	ldi	r20, 0x01	; 1
    2b30:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_SetPinDirection>

	DIO_SetPinDirection(DC_MOTOR_INPUT,DC_MOTOR_IN2,PIN_OUTPUT);
    2b34:	80 e0       	ldi	r24, 0x00	; 0
    2b36:	61 e0       	ldi	r22, 0x01	; 1
    2b38:	41 e0       	ldi	r20, 0x01	; 1
    2b3a:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_SetPinDirection>

	DIO_SetPinDirection(DC_MOTOR_INPUT,DC_MOTOR_IN3,PIN_OUTPUT);
    2b3e:	80 e0       	ldi	r24, 0x00	; 0
    2b40:	62 e0       	ldi	r22, 0x02	; 2
    2b42:	41 e0       	ldi	r20, 0x01	; 1
    2b44:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_SetPinDirection>

	DIO_SetPinDirection(DC_MOTOR_INPUT,DC_MOTOR_IN4,PIN_OUTPUT);
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	63 e0       	ldi	r22, 0x03	; 3
    2b4c:	41 e0       	ldi	r20, 0x01	; 1
    2b4e:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_SetPinDirection>

	DIO_SetPinDirection(DC_MOTOR_PWM,DC_MOTOR_ENA_ENB,PIN_OUTPUT);
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	63 e0       	ldi	r22, 0x03	; 3
    2b56:	41 e0       	ldi	r20, 0x01	; 1
    2b58:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_SetPinDirection>

	OCR0_Register=255;
    2b5c:	ec e5       	ldi	r30, 0x5C	; 92
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	8f ef       	ldi	r24, 0xFF	; 255
    2b62:	80 83       	st	Z, r24
}
    2b64:	cf 91       	pop	r28
    2b66:	df 91       	pop	r29
    2b68:	08 95       	ret

00002b6a <DC_MOTOR_FORWARD>:
void DC_MOTOR_FORWARD()
{
    2b6a:	df 93       	push	r29
    2b6c:	cf 93       	push	r28
    2b6e:	cd b7       	in	r28, 0x3d	; 61
    2b70:	de b7       	in	r29, 0x3e	; 62

	DIO_SetPinValue(DC_MOTOR_INPUT,DC_MOTOR_IN1, PIN_LOW);
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	60 e0       	ldi	r22, 0x00	; 0
    2b76:	40 e0       	ldi	r20, 0x00	; 0
    2b78:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>

	DIO_SetPinValue(DC_MOTOR_INPUT, DC_MOTOR_IN2, PIN_HIGH);
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	61 e0       	ldi	r22, 0x01	; 1
    2b80:	41 e0       	ldi	r20, 0x01	; 1
    2b82:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>

	DIO_SetPinValue(DC_MOTOR_INPUT,DC_MOTOR_IN3,PIN_LOW);
    2b86:	80 e0       	ldi	r24, 0x00	; 0
    2b88:	62 e0       	ldi	r22, 0x02	; 2
    2b8a:	40 e0       	ldi	r20, 0x00	; 0
    2b8c:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>

	DIO_SetPinValue(DC_MOTOR_INPUT,DC_MOTOR_IN4,PIN_HIGH);
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	63 e0       	ldi	r22, 0x03	; 3
    2b94:	41 e0       	ldi	r20, 0x01	; 1
    2b96:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>
}
    2b9a:	cf 91       	pop	r28
    2b9c:	df 91       	pop	r29
    2b9e:	08 95       	ret

00002ba0 <DC_MOTOR_BACK>:

void DC_MOTOR_BACK(){
    2ba0:	df 93       	push	r29
    2ba2:	cf 93       	push	r28
    2ba4:	cd b7       	in	r28, 0x3d	; 61
    2ba6:	de b7       	in	r29, 0x3e	; 62

	DIO_SetPinValue(DC_MOTOR_INPUT,DC_MOTOR_IN1, PIN_HIGH);
    2ba8:	80 e0       	ldi	r24, 0x00	; 0
    2baa:	60 e0       	ldi	r22, 0x00	; 0
    2bac:	41 e0       	ldi	r20, 0x01	; 1
    2bae:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>

	DIO_SetPinValue(DC_MOTOR_INPUT,DC_MOTOR_IN2, PIN_LOW);
    2bb2:	80 e0       	ldi	r24, 0x00	; 0
    2bb4:	61 e0       	ldi	r22, 0x01	; 1
    2bb6:	40 e0       	ldi	r20, 0x00	; 0
    2bb8:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>

	DIO_SetPinValue(DC_MOTOR_INPUT,DC_MOTOR_IN3, PIN_HIGH);
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
    2bbe:	62 e0       	ldi	r22, 0x02	; 2
    2bc0:	41 e0       	ldi	r20, 0x01	; 1
    2bc2:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>

	DIO_SetPinValue(DC_MOTOR_INPUT, DC_MOTOR_IN4, PIN_LOW);
    2bc6:	80 e0       	ldi	r24, 0x00	; 0
    2bc8:	63 e0       	ldi	r22, 0x03	; 3
    2bca:	40 e0       	ldi	r20, 0x00	; 0
    2bcc:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>

}
    2bd0:	cf 91       	pop	r28
    2bd2:	df 91       	pop	r29
    2bd4:	08 95       	ret

00002bd6 <DC_MOTOR_RIGHT>:

void DC_MOTOR_RIGHT(){
    2bd6:	df 93       	push	r29
    2bd8:	cf 93       	push	r28
    2bda:	cd b7       	in	r28, 0x3d	; 61
    2bdc:	de b7       	in	r29, 0x3e	; 62

	DIO_SetPinValue(DC_MOTOR_INPUT, DC_MOTOR_IN1, PIN_LOW);
    2bde:	80 e0       	ldi	r24, 0x00	; 0
    2be0:	60 e0       	ldi	r22, 0x00	; 0
    2be2:	40 e0       	ldi	r20, 0x00	; 0
    2be4:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>

	DIO_SetPinValue(DC_MOTOR_INPUT, DC_MOTOR_IN2, PIN_HIGH);
    2be8:	80 e0       	ldi	r24, 0x00	; 0
    2bea:	61 e0       	ldi	r22, 0x01	; 1
    2bec:	41 e0       	ldi	r20, 0x01	; 1
    2bee:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>

	DIO_SetPinValue(DC_MOTOR_INPUT, DC_MOTOR_IN3, PIN_HIGH);
    2bf2:	80 e0       	ldi	r24, 0x00	; 0
    2bf4:	62 e0       	ldi	r22, 0x02	; 2
    2bf6:	41 e0       	ldi	r20, 0x01	; 1
    2bf8:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>

	DIO_SetPinValue(DC_MOTOR_INPUT, DC_MOTOR_IN4, PIN_LOW);
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
    2bfe:	63 e0       	ldi	r22, 0x03	; 3
    2c00:	40 e0       	ldi	r20, 0x00	; 0
    2c02:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>

}
    2c06:	cf 91       	pop	r28
    2c08:	df 91       	pop	r29
    2c0a:	08 95       	ret

00002c0c <DC_MOTOR_LEFT>:

void DC_MOTOR_LEFT(){
    2c0c:	df 93       	push	r29
    2c0e:	cf 93       	push	r28
    2c10:	cd b7       	in	r28, 0x3d	; 61
    2c12:	de b7       	in	r29, 0x3e	; 62

	DIO_SetPinValue(DC_MOTOR_INPUT,DC_MOTOR_IN1,PIN_HIGH);
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	60 e0       	ldi	r22, 0x00	; 0
    2c18:	41 e0       	ldi	r20, 0x01	; 1
    2c1a:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>

	DIO_SetPinValue(DC_MOTOR_INPUT,DC_MOTOR_IN2, PIN_LOW);
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	61 e0       	ldi	r22, 0x01	; 1
    2c22:	40 e0       	ldi	r20, 0x00	; 0
    2c24:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>

	DIO_SetPinValue(DC_MOTOR_INPUT,DC_MOTOR_IN3,PIN_LOW);
    2c28:	80 e0       	ldi	r24, 0x00	; 0
    2c2a:	62 e0       	ldi	r22, 0x02	; 2
    2c2c:	40 e0       	ldi	r20, 0x00	; 0
    2c2e:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>

	DIO_SetPinValue(DC_MOTOR_INPUT,DC_MOTOR_IN4,PIN_HIGH);
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	63 e0       	ldi	r22, 0x03	; 3
    2c36:	41 e0       	ldi	r20, 0x01	; 1
    2c38:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>


}
    2c3c:	cf 91       	pop	r28
    2c3e:	df 91       	pop	r29
    2c40:	08 95       	ret

00002c42 <DC_MOTOR_Turnoff>:

void DC_MOTOR_Turnoff(){
    2c42:	df 93       	push	r29
    2c44:	cf 93       	push	r28
    2c46:	cd b7       	in	r28, 0x3d	; 61
    2c48:	de b7       	in	r29, 0x3e	; 62

	DIO_SetPinValue(DC_MOTOR_INPUT,DC_MOTOR_IN1,PIN_LOW);
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
    2c4c:	60 e0       	ldi	r22, 0x00	; 0
    2c4e:	40 e0       	ldi	r20, 0x00	; 0
    2c50:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>

	DIO_SetPinValue(DC_MOTOR_INPUT,DC_MOTOR_IN2,PIN_LOW);
    2c54:	80 e0       	ldi	r24, 0x00	; 0
    2c56:	61 e0       	ldi	r22, 0x01	; 1
    2c58:	40 e0       	ldi	r20, 0x00	; 0
    2c5a:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>

	DIO_SetPinValue(DC_MOTOR_INPUT,DC_MOTOR_IN3, PIN_LOW);
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	62 e0       	ldi	r22, 0x02	; 2
    2c62:	40 e0       	ldi	r20, 0x00	; 0
    2c64:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>

	DIO_SetPinValue(DC_MOTOR_INPUT,DC_MOTOR_IN4,PIN_LOW);
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	63 e0       	ldi	r22, 0x03	; 3
    2c6c:	40 e0       	ldi	r20, 0x00	; 0
    2c6e:	0e 94 8b 07 	call	0xf16	; 0xf16 <DIO_SetPinValue>
}
    2c72:	cf 91       	pop	r28
    2c74:	df 91       	pop	r29
    2c76:	08 95       	ret

00002c78 <PWM_Timer0_Init>:

void PWM_Timer0_Init() {
    2c78:	df 93       	push	r29
    2c7a:	cf 93       	push	r28
    2c7c:	cd b7       	in	r28, 0x3d	; 61
    2c7e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0_Register, 0);
    2c80:	a3 e5       	ldi	r26, 0x53	; 83
    2c82:	b0 e0       	ldi	r27, 0x00	; 0
    2c84:	e3 e5       	ldi	r30, 0x53	; 83
    2c86:	f0 e0       	ldi	r31, 0x00	; 0
    2c88:	80 81       	ld	r24, Z
    2c8a:	81 60       	ori	r24, 0x01	; 1
    2c8c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_Register, 1);
    2c8e:	a3 e5       	ldi	r26, 0x53	; 83
    2c90:	b0 e0       	ldi	r27, 0x00	; 0
    2c92:	e3 e5       	ldi	r30, 0x53	; 83
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	80 81       	ld	r24, Z
    2c98:	8d 7f       	andi	r24, 0xFD	; 253
    2c9a:	8c 93       	st	X, r24
	SET_BIT(TCCR0_Register, 2);
    2c9c:	a3 e5       	ldi	r26, 0x53	; 83
    2c9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ca0:	e3 e5       	ldi	r30, 0x53	; 83
    2ca2:	f0 e0       	ldi	r31, 0x00	; 0
    2ca4:	80 81       	ld	r24, Z
    2ca6:	84 60       	ori	r24, 0x04	; 4
    2ca8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_Register, 3);
    2caa:	a3 e5       	ldi	r26, 0x53	; 83
    2cac:	b0 e0       	ldi	r27, 0x00	; 0
    2cae:	e3 e5       	ldi	r30, 0x53	; 83
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	80 81       	ld	r24, Z
    2cb4:	87 7f       	andi	r24, 0xF7	; 247
    2cb6:	8c 93       	st	X, r24
	SET_BIT(TCCR0_Register, 4);
    2cb8:	a3 e5       	ldi	r26, 0x53	; 83
    2cba:	b0 e0       	ldi	r27, 0x00	; 0
    2cbc:	e3 e5       	ldi	r30, 0x53	; 83
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	80 81       	ld	r24, Z
    2cc2:	80 61       	ori	r24, 0x10	; 16
    2cc4:	8c 93       	st	X, r24
	SET_BIT(TCCR0_Register, 5);
    2cc6:	a3 e5       	ldi	r26, 0x53	; 83
    2cc8:	b0 e0       	ldi	r27, 0x00	; 0
    2cca:	e3 e5       	ldi	r30, 0x53	; 83
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	80 81       	ld	r24, Z
    2cd0:	80 62       	ori	r24, 0x20	; 32
    2cd2:	8c 93       	st	X, r24
	SET_BIT(TCCR0_Register, 6);
    2cd4:	a3 e5       	ldi	r26, 0x53	; 83
    2cd6:	b0 e0       	ldi	r27, 0x00	; 0
    2cd8:	e3 e5       	ldi	r30, 0x53	; 83
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	80 81       	ld	r24, Z
    2cde:	80 64       	ori	r24, 0x40	; 64
    2ce0:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_Register, 7);
    2ce2:	a3 e5       	ldi	r26, 0x53	; 83
    2ce4:	b0 e0       	ldi	r27, 0x00	; 0
    2ce6:	e3 e5       	ldi	r30, 0x53	; 83
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	80 81       	ld	r24, Z
    2cec:	8f 77       	andi	r24, 0x7F	; 127
    2cee:	8c 93       	st	X, r24

	DIO_SetPortValue(TIMSK_Register,PORT_LOW);
    2cf0:	e9 e5       	ldi	r30, 0x59	; 89
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	80 81       	ld	r24, Z
    2cf6:	60 e0       	ldi	r22, 0x00	; 0
    2cf8:	0e 94 be 06 	call	0xd7c	; 0xd7c <DIO_SetPortValue>

}
    2cfc:	cf 91       	pop	r28
    2cfe:	df 91       	pop	r29
    2d00:	08 95       	ret

00002d02 <Set_Motor_Speed>:

void Set_Motor_Speed(u8 speed) {
    2d02:	df 93       	push	r29
    2d04:	cf 93       	push	r28
    2d06:	0f 92       	push	r0
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
    2d0c:	89 83       	std	Y+1, r24	; 0x01
    // Ensure speed is within valid range (0 to 255)
    if (speed > 255) {
        speed = 255;
    }
    OCR0_Register = speed;
    2d0e:	ec e5       	ldi	r30, 0x5C	; 92
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	89 81       	ldd	r24, Y+1	; 0x01
    2d14:	80 83       	st	Z, r24
}
    2d16:	0f 90       	pop	r0
    2d18:	cf 91       	pop	r28
    2d1a:	df 91       	pop	r29
    2d1c:	08 95       	ret

00002d1e <Init_Timer1>:

void Init_Timer1() {
    2d1e:	df 93       	push	r29
    2d20:	cf 93       	push	r28
    2d22:	cd b7       	in	r28, 0x3d	; 61
    2d24:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B_Register, 0);
    2d26:	ae e4       	ldi	r26, 0x4E	; 78
    2d28:	b0 e0       	ldi	r27, 0x00	; 0
    2d2a:	ee e4       	ldi	r30, 0x4E	; 78
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	80 81       	ld	r24, Z
    2d30:	81 60       	ori	r24, 0x01	; 1
    2d32:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register, 1);
    2d34:	ae e4       	ldi	r26, 0x4E	; 78
    2d36:	b0 e0       	ldi	r27, 0x00	; 0
    2d38:	ee e4       	ldi	r30, 0x4E	; 78
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	80 81       	ld	r24, Z
    2d3e:	82 60       	ori	r24, 0x02	; 2
    2d40:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_Register, 2);
    2d42:	ae e4       	ldi	r26, 0x4E	; 78
    2d44:	b0 e0       	ldi	r27, 0x00	; 0
    2d46:	ee e4       	ldi	r30, 0x4E	; 78
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	80 81       	ld	r24, Z
    2d4c:	8b 7f       	andi	r24, 0xFB	; 251
    2d4e:	8c 93       	st	X, r24
}
    2d50:	cf 91       	pop	r28
    2d52:	df 91       	pop	r29
    2d54:	08 95       	ret

00002d56 <Delay_Seconds>:

void Delay_Seconds(u16 seconds) {
    2d56:	df 93       	push	r29
    2d58:	cf 93       	push	r28
    2d5a:	00 d0       	rcall	.+0      	; 0x2d5c <Delay_Seconds+0x6>
    2d5c:	00 d0       	rcall	.+0      	; 0x2d5e <Delay_Seconds+0x8>
    2d5e:	cd b7       	in	r28, 0x3d	; 61
    2d60:	de b7       	in	r29, 0x3e	; 62
    2d62:	9c 83       	std	Y+4, r25	; 0x04
    2d64:	8b 83       	std	Y+3, r24	; 0x03
    for (u16 i = 0; i <= seconds; ++i) {
    2d66:	1a 82       	std	Y+2, r1	; 0x02
    2d68:	19 82       	std	Y+1, r1	; 0x01
    2d6a:	17 c0       	rjmp	.+46     	; 0x2d9a <Delay_Seconds+0x44>
        // Wait for the Timer 1 overflow flag
        while (!GET_BIT(TIFR_Register, 2));
    2d6c:	e8 e5       	ldi	r30, 0x58	; 88
    2d6e:	f0 e0       	ldi	r31, 0x00	; 0
    2d70:	80 81       	ld	r24, Z
    2d72:	86 95       	lsr	r24
    2d74:	86 95       	lsr	r24
    2d76:	88 2f       	mov	r24, r24
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	81 70       	andi	r24, 0x01	; 1
    2d7c:	90 70       	andi	r25, 0x00	; 0
    2d7e:	00 97       	sbiw	r24, 0x00	; 0
    2d80:	a9 f3       	breq	.-22     	; 0x2d6c <Delay_Seconds+0x16>
        // Clear the Timer 1 overflow flag by writing a logic 1 to it
        SET_BIT(TIFR_Register, 2);
    2d82:	a8 e5       	ldi	r26, 0x58	; 88
    2d84:	b0 e0       	ldi	r27, 0x00	; 0
    2d86:	e8 e5       	ldi	r30, 0x58	; 88
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	80 81       	ld	r24, Z
    2d8c:	84 60       	ori	r24, 0x04	; 4
    2d8e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register, 1);
	CLR_BIT(TCCR1B_Register, 2);
}

void Delay_Seconds(u16 seconds) {
    for (u16 i = 0; i <= seconds; ++i) {
    2d90:	89 81       	ldd	r24, Y+1	; 0x01
    2d92:	9a 81       	ldd	r25, Y+2	; 0x02
    2d94:	01 96       	adiw	r24, 0x01	; 1
    2d96:	9a 83       	std	Y+2, r25	; 0x02
    2d98:	89 83       	std	Y+1, r24	; 0x01
    2d9a:	29 81       	ldd	r18, Y+1	; 0x01
    2d9c:	3a 81       	ldd	r19, Y+2	; 0x02
    2d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2da0:	9c 81       	ldd	r25, Y+4	; 0x04
    2da2:	82 17       	cp	r24, r18
    2da4:	93 07       	cpc	r25, r19
    2da6:	10 f7       	brcc	.-60     	; 0x2d6c <Delay_Seconds+0x16>
        // Wait for the Timer 1 overflow flag
        while (!GET_BIT(TIFR_Register, 2));
        // Clear the Timer 1 overflow flag by writing a logic 1 to it
        SET_BIT(TIFR_Register, 2);
    }
}
    2da8:	0f 90       	pop	r0
    2daa:	0f 90       	pop	r0
    2dac:	0f 90       	pop	r0
    2dae:	0f 90       	pop	r0
    2db0:	cf 91       	pop	r28
    2db2:	df 91       	pop	r29
    2db4:	08 95       	ret

00002db6 <__mulsi3>:
    2db6:	62 9f       	mul	r22, r18
    2db8:	d0 01       	movw	r26, r0
    2dba:	73 9f       	mul	r23, r19
    2dbc:	f0 01       	movw	r30, r0
    2dbe:	82 9f       	mul	r24, r18
    2dc0:	e0 0d       	add	r30, r0
    2dc2:	f1 1d       	adc	r31, r1
    2dc4:	64 9f       	mul	r22, r20
    2dc6:	e0 0d       	add	r30, r0
    2dc8:	f1 1d       	adc	r31, r1
    2dca:	92 9f       	mul	r25, r18
    2dcc:	f0 0d       	add	r31, r0
    2dce:	83 9f       	mul	r24, r19
    2dd0:	f0 0d       	add	r31, r0
    2dd2:	74 9f       	mul	r23, r20
    2dd4:	f0 0d       	add	r31, r0
    2dd6:	65 9f       	mul	r22, r21
    2dd8:	f0 0d       	add	r31, r0
    2dda:	99 27       	eor	r25, r25
    2ddc:	72 9f       	mul	r23, r18
    2dde:	b0 0d       	add	r27, r0
    2de0:	e1 1d       	adc	r30, r1
    2de2:	f9 1f       	adc	r31, r25
    2de4:	63 9f       	mul	r22, r19
    2de6:	b0 0d       	add	r27, r0
    2de8:	e1 1d       	adc	r30, r1
    2dea:	f9 1f       	adc	r31, r25
    2dec:	bd 01       	movw	r22, r26
    2dee:	cf 01       	movw	r24, r30
    2df0:	11 24       	eor	r1, r1
    2df2:	08 95       	ret

00002df4 <__udivmodsi4>:
    2df4:	a1 e2       	ldi	r26, 0x21	; 33
    2df6:	1a 2e       	mov	r1, r26
    2df8:	aa 1b       	sub	r26, r26
    2dfa:	bb 1b       	sub	r27, r27
    2dfc:	fd 01       	movw	r30, r26
    2dfe:	0d c0       	rjmp	.+26     	; 0x2e1a <__udivmodsi4_ep>

00002e00 <__udivmodsi4_loop>:
    2e00:	aa 1f       	adc	r26, r26
    2e02:	bb 1f       	adc	r27, r27
    2e04:	ee 1f       	adc	r30, r30
    2e06:	ff 1f       	adc	r31, r31
    2e08:	a2 17       	cp	r26, r18
    2e0a:	b3 07       	cpc	r27, r19
    2e0c:	e4 07       	cpc	r30, r20
    2e0e:	f5 07       	cpc	r31, r21
    2e10:	20 f0       	brcs	.+8      	; 0x2e1a <__udivmodsi4_ep>
    2e12:	a2 1b       	sub	r26, r18
    2e14:	b3 0b       	sbc	r27, r19
    2e16:	e4 0b       	sbc	r30, r20
    2e18:	f5 0b       	sbc	r31, r21

00002e1a <__udivmodsi4_ep>:
    2e1a:	66 1f       	adc	r22, r22
    2e1c:	77 1f       	adc	r23, r23
    2e1e:	88 1f       	adc	r24, r24
    2e20:	99 1f       	adc	r25, r25
    2e22:	1a 94       	dec	r1
    2e24:	69 f7       	brne	.-38     	; 0x2e00 <__udivmodsi4_loop>
    2e26:	60 95       	com	r22
    2e28:	70 95       	com	r23
    2e2a:	80 95       	com	r24
    2e2c:	90 95       	com	r25
    2e2e:	9b 01       	movw	r18, r22
    2e30:	ac 01       	movw	r20, r24
    2e32:	bd 01       	movw	r22, r26
    2e34:	cf 01       	movw	r24, r30
    2e36:	08 95       	ret

00002e38 <__prologue_saves__>:
    2e38:	2f 92       	push	r2
    2e3a:	3f 92       	push	r3
    2e3c:	4f 92       	push	r4
    2e3e:	5f 92       	push	r5
    2e40:	6f 92       	push	r6
    2e42:	7f 92       	push	r7
    2e44:	8f 92       	push	r8
    2e46:	9f 92       	push	r9
    2e48:	af 92       	push	r10
    2e4a:	bf 92       	push	r11
    2e4c:	cf 92       	push	r12
    2e4e:	df 92       	push	r13
    2e50:	ef 92       	push	r14
    2e52:	ff 92       	push	r15
    2e54:	0f 93       	push	r16
    2e56:	1f 93       	push	r17
    2e58:	cf 93       	push	r28
    2e5a:	df 93       	push	r29
    2e5c:	cd b7       	in	r28, 0x3d	; 61
    2e5e:	de b7       	in	r29, 0x3e	; 62
    2e60:	ca 1b       	sub	r28, r26
    2e62:	db 0b       	sbc	r29, r27
    2e64:	0f b6       	in	r0, 0x3f	; 63
    2e66:	f8 94       	cli
    2e68:	de bf       	out	0x3e, r29	; 62
    2e6a:	0f be       	out	0x3f, r0	; 63
    2e6c:	cd bf       	out	0x3d, r28	; 61
    2e6e:	09 94       	ijmp

00002e70 <__epilogue_restores__>:
    2e70:	2a 88       	ldd	r2, Y+18	; 0x12
    2e72:	39 88       	ldd	r3, Y+17	; 0x11
    2e74:	48 88       	ldd	r4, Y+16	; 0x10
    2e76:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e78:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e7a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e7c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e7e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e80:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e82:	b9 84       	ldd	r11, Y+9	; 0x09
    2e84:	c8 84       	ldd	r12, Y+8	; 0x08
    2e86:	df 80       	ldd	r13, Y+7	; 0x07
    2e88:	ee 80       	ldd	r14, Y+6	; 0x06
    2e8a:	fd 80       	ldd	r15, Y+5	; 0x05
    2e8c:	0c 81       	ldd	r16, Y+4	; 0x04
    2e8e:	1b 81       	ldd	r17, Y+3	; 0x03
    2e90:	aa 81       	ldd	r26, Y+2	; 0x02
    2e92:	b9 81       	ldd	r27, Y+1	; 0x01
    2e94:	ce 0f       	add	r28, r30
    2e96:	d1 1d       	adc	r29, r1
    2e98:	0f b6       	in	r0, 0x3f	; 63
    2e9a:	f8 94       	cli
    2e9c:	de bf       	out	0x3e, r29	; 62
    2e9e:	0f be       	out	0x3f, r0	; 63
    2ea0:	cd bf       	out	0x3d, r28	; 61
    2ea2:	ed 01       	movw	r28, r26
    2ea4:	08 95       	ret

00002ea6 <_exit>:
    2ea6:	f8 94       	cli

00002ea8 <__stop_program>:
    2ea8:	ff cf       	rjmp	.-2      	; 0x2ea8 <__stop_program>
